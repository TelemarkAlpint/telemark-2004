%!PS-Adobe-3.1 EPSF-3.0%%Title: Chess-folkets mobil POS.eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Atle Johnsen%%CreationDate: 25-05-04%%BoundingBox: 0 0 702 329%%HiResBoundingBox: 0 0 701.3848 328.2901%%CropBox: 0 0 701.3848 328.2901%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Chess-folkets mobil POS.eps) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2004-05-03T12:31:06Z</xap:CreateDate>
  <xap:ModifyDate>2004-05-25T11:04:52Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>120</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVk08MKc5pFjQdWchR95wGQHNlGBkaAtJrvzx5M&#xA;s6/WddsImH7LXMXL/geVcpOpxD+IfNz8XZGryfTiyH/NP6klufzn/LK3+3rkbH/iuKeTtX9iNsq/&#xA;lDD/ADvsLn4/ZXtGXLEfiYj7ylVx/wA5CflzFXhNdT0p/d27Cv8AwZTKj2piHe5sPYntA8xGPvl+&#xA;q0vn/wCclfJKVENhqMpB6mOFVI8a+qT+GQPauPoC5UPYLWHnPGPjL/iUG3/OS+ju5S10K7mc/wB2&#xA;pkQE/MKHplZ7WH837f2N49gcoFyywHwP7EfbfnT5pvFBsPIOpXFf2uUgT/gxbsMnHtGcuWMn8e5x&#xA;p+ymmx/Xq8cflfy405svO35mXdCvkBol/mm1OGOn+xaIN+GXx1OY/wCT+1wMvZPZ0P8AkXfuxSP+&#xA;+pkGn6j53nat5odlZpTeuovK9fktpx/4bLozynnED/O/Y6zPg0cfoyzkf+Fgf9PP0J8K0Fdj3AzI&#xA;dY3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirzH84/O2r2dmfLflmC4utb&#xA;vV/0mS0jeR7eFttuANJJO3cDfwzWa/Ukfu4fUXr/AGX7JxZJ/mNQYxww5cRA4j8eg+/bveL2f5Rf&#xA;mhq8gkfSZ1r9qW8kSIiu9SJWD/cM1UNHllyifu+99Ay+03ZuAUMkfdEE/cKZPpn/ADjT5rm4tqGp&#xA;Wdmp6rH6k7j5jjGv3NmTDsvIeZAdPqPb3TR/u4Tl76iP0n7GV6b/AM4zeW4qHUdWu7ph1EKxwKT8&#xA;mEx/HMmPZMesj9363S5/b7US/u8cI++5f8Syay/Iz8s7WhOlNcOP2pp5m/4UOq/hmRHs7COl/F1G&#xA;X2v7Rn/lOH3Rj+q09s/y98i2YH1fQLBSOjtbxu3/AAThm/HLo6TEP4Q63L21rcn1Zcn+mP6E7trS&#xA;0tU4W0McCfyxqEH3KBl0YCPIU66eSUzciT71bJMHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq//Z</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -328.291 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 328.291 li701.385 328.291 li701.385 0 liclp[1 0 0 1 0 0 ] concat151.59 19.668 mo156.963 19.668 162.314 19.7266 167.574 19.8121 cv167.917 19.8165 169.446 19.7129 169.446 19.9561 cv169.496 19.9561 169.545 19.9561 169.59 19.9561 cv169.59 35.94 169.59 51.9239 169.59 67.9078 cv169.59 73.3126 169.136 78.501 168.74 83.6041 cv168.596 85.4356 168.263 87.1636 167.984 88.9273 cv167.867 89.6338 167.588 90.462 167.682 91.2178 cv167.696 91.272 167.709 91.3257 167.718 91.3799 cv167.718 91.3306 167.718 91.2852 167.718 91.2359 cv169.059 89.4 170.148 87.42 171.656 85.6651 cv176.349 80.1841 182.343 75.9991 188.873 73.7847 cv190.893 73.0962 193.499 72.084 195.798 72.084 cv196.086 72.0342 196.375 71.9893 196.662 71.94 cv197 71.8902 197.337 71.8453 197.67 71.796 cv198.053 71.7466 198.44 71.7012 198.822 71.6519 cv199.263 71.4268 199.997 71.5079 200.55 71.5079 cv201.419 71.1568 202.836 71.3638 203.862 71.3638 cv204.47 71.0894 205.375 71.3052 206.022 71.337 cv207.246 71.3907 208.47 71.4224 209.623 71.4942 cv220.873 72.1963 230.493 77.8169 235.151 87.9014 cv239.903 98.2017 238.854 111.68 238.854 124.5 cv238.854 145.813 238.854 167.125 238.854 188.437 cv228.292 188.437 217.736 188.437 207.174 188.437 cv207.174 166.31 207.174 144.183 207.174 122.052 cv207.174 114.853 207.854 104.817 202.656 100.511 cv200.852 99.0118 198.62 98.5079 196.221 98.1973 cv194.237 97.9366 192.045 98.2017 190.304 98.6607 cv182.645 100.673 177.335 106.519 173.964 113.439 cv172.07 117.323 170.621 121.71 170.049 126.229 cv169.559 130.071 169.59 134.275 169.59 138.468 cv169.59 142.694 169.59 146.919 169.59 151.14 cv169.59 163.574 169.59 176.007 169.59 188.437 cv158.934 188.437 148.278 188.437 137.622 188.437 cv137.613 140.772 137.604 93.108 137.591 45.4439 cv137.564 45.1021 137.564 44.7149 137.267 44.544 cv136.241 43.959 134.504 43.959 133.302 43.8282 cv129.612 43.4146 125.917 42.9463 122.209 42.5953 cv121.382 42.5142 118.236 42.4336 117.832 41.9385 cv117.804 41.8887 117.777 41.8394 117.75 41.7852 cv117.359 40.7637 117.606 38.6221 117.606 37.3799 cv117.606 33.6856 117.606 29.9908 117.606 26.292 cv117.606 25.0723 117.341 23.3624 117.755 22.3184 cv117.948 21.8189 118.965 21.8282 119.479 21.8282 cv119.911 21.7784 120.342 21.7334 120.774 21.6836 cv121.175 21.522 121.737 21.5401 122.214 21.5401 cv122.61 21.378 123.173 21.396 123.654 21.396 cv124.05 21.2339 124.613 21.252 125.094 21.252 cv125.54 21.0718 126.152 21.108 126.679 21.108 cv127.151 20.8965 127.834 20.9639 128.406 20.9639 cv128.915 20.7344 129.653 20.8199 130.278 20.8199 cv130.792 20.5904 131.529 20.6758 132.15 20.6758 cv132.726 20.4151 133.617 20.5318 134.311 20.5318 cv134.913 20.2618 135.881 20.3877 136.614 20.3877 cv137.312 20.0728 138.509 20.2437 139.35 20.2437 cv140.125 19.8975 141.452 20.0997 142.375 20.0997 cv143.18 19.7398 145.092 19.9561 146.118 19.9561 cv147.36 19.398 150.15 20.0909 151.59 19.668 cvfalse sop/0 [/DeviceCMYK] add_csa0 0 0 0 cmykf1 lw0 lc0 lj4 ml[] 0 dshtrue sadj151.59 19.668 mo156.963 19.668 162.314 19.7266 167.574 19.8121 cv167.917 19.8165 169.446 19.7129 169.446 19.9561 cv169.496 19.9561 169.545 19.9561 169.59 19.9561 cv169.59 35.94 169.59 51.9239 169.59 67.9078 cv169.59 73.3126 169.136 78.501 168.74 83.6041 cv168.596 85.4356 168.263 87.1636 167.984 88.9273 cv167.867 89.6338 167.588 90.462 167.682 91.2178 cv167.696 91.272 167.709 91.3257 167.718 91.3799 cv167.718 91.3306 167.718 91.2852 167.718 91.2359 cv169.059 89.4 170.148 87.42 171.656 85.6651 cv176.349 80.1841 182.343 75.9991 188.873 73.7847 cv190.893 73.0962 193.499 72.084 195.798 72.084 cv196.086 72.0342 196.375 71.9893 196.662 71.94 cv197 71.8902 197.337 71.8453 197.67 71.796 cv198.053 71.7466 198.44 71.7012 198.822 71.6519 cv199.263 71.4268 199.997 71.5079 200.55 71.5079 cv201.419 71.1568 202.836 71.3638 203.862 71.3638 cv204.47 71.0894 205.375 71.3052 206.022 71.337 cv207.246 71.3907 208.47 71.4224 209.623 71.4942 cv220.873 72.1963 230.493 77.8169 235.151 87.9014 cv239.903 98.2017 238.854 111.68 238.854 124.5 cv238.854 145.813 238.854 167.125 238.854 188.437 cv228.292 188.437 217.736 188.437 207.174 188.437 cv207.174 166.31 207.174 144.183 207.174 122.052 cv207.174 114.853 207.854 104.817 202.656 100.511 cv200.852 99.0118 198.62 98.5079 196.221 98.1973 cv194.237 97.9366 192.045 98.2017 190.304 98.6607 cv182.645 100.673 177.335 106.519 173.964 113.439 cv172.07 117.323 170.621 121.71 170.049 126.229 cv169.559 130.071 169.59 134.275 169.59 138.468 cv169.59 142.694 169.59 146.919 169.59 151.14 cv169.59 163.574 169.59 176.007 169.59 188.437 cv158.934 188.437 148.278 188.437 137.622 188.437 cv137.613 140.772 137.604 93.108 137.591 45.4439 cv137.564 45.1021 137.564 44.7149 137.267 44.544 cv136.241 43.959 134.504 43.959 133.302 43.8282 cv129.612 43.4146 125.917 42.9463 122.209 42.5953 cv121.382 42.5142 118.236 42.4336 117.832 41.9385 cv117.804 41.8887 117.777 41.8394 117.75 41.7852 cv117.359 40.7637 117.606 38.6221 117.606 37.3799 cv117.606 33.6856 117.606 29.9908 117.606 26.292 cv117.606 25.0723 117.341 23.3624 117.755 22.3184 cv117.948 21.8189 118.965 21.8282 119.479 21.8282 cv119.911 21.7784 120.342 21.7334 120.774 21.6836 cv121.175 21.522 121.737 21.5401 122.214 21.5401 cv122.61 21.378 123.173 21.396 123.654 21.396 cv124.05 21.2339 124.613 21.252 125.094 21.252 cv125.54 21.0718 126.152 21.108 126.679 21.108 cv127.151 20.8965 127.834 20.9639 128.406 20.9639 cv128.915 20.7344 129.653 20.8199 130.278 20.8199 cv130.792 20.5904 131.529 20.6758 132.15 20.6758 cv132.726 20.4151 133.617 20.5318 134.311 20.5318 cv134.913 20.2618 135.881 20.3877 136.614 20.3877 cv137.312 20.0728 138.509 20.2437 139.35 20.2437 cv140.125 19.8975 141.452 20.0997 142.375 20.0997 cv143.18 19.7398 145.092 19.9561 146.118 19.9561 cv147.36 19.398 150.15 20.0909 151.59 19.668 cvcp@75.2701 31.6202 mo79.3965 31.6202 83.4507 31.566 87.3614 31.9395 cv93.0992 32.4839 98.6338 33.2896 104.07 34.3423 cv105.236 34.5674 112.364 36.1695 112.657 36.8892 cv112.958 37.6363 112.211 39.7696 112.031 40.5523 cv111.131 44.4312 110.235 48.3106 109.335 52.1895 cv108.971 53.7149 106.595 65.0098 106.064 65.3521 cv105.974 65.3746 105.884 65.4014 105.79 65.4239 cv105.056 65.4644 104.138 64.9693 103.485 64.7623 cv102.248 64.398 101.01 64.0381 99.7725 63.6734 cv95.4659 62.3458 90.795 61.6216 86.0655 61.1714 cv69.8384 59.6236 56.5499 62.7735 46.8838 74.5137 cv37.9473 85.3589 35.6382 100.533 36.3716 116.149 cv36.9932 129.473 40.44 143.279 50.2588 151.946 cv58.5162 159.231 69.0196 160.932 81.0298 160.932 cv81.6553 160.617 82.8438 160.789 83.6216 160.789 cv84.0494 160.59 84.6836 160.645 85.2061 160.645 cv85.566 160.459 86.2002 160.5 86.646 160.5 cv87.0284 160.451 87.4156 160.406 87.7979 160.356 cv88.1353 160.307 88.4732 160.262 88.8062 160.212 cv89.1436 160.163 89.481 160.118 89.8135 160.068 cv90.1021 160.019 90.3902 159.974 90.6783 159.924 cv90.9659 159.876 91.254 159.83 91.5416 159.78 cv93.4542 159.326 95.3668 158.872 97.2794 158.417 cv99.5025 157.827 101.69 157.167 103.778 156.32 cv104.835 155.887 105.893 155.46 106.95 155.028 cv106.95 154.979 106.95 154.934 106.95 154.884 cv107 154.884 107.049 154.884 107.095 154.884 cv107.095 154.934 107.095 154.984 107.095 155.028 cv107.297 155.793 107.5 156.558 107.697 157.323 cv108.075 159.006 108.454 160.69 108.832 162.368 cv110.411 169.379 111.995 176.389 113.574 183.396 cv113.525 183.396 113.48 183.396 113.43 183.396 cv112.603 183.864 111.604 184.134 110.699 184.422 cv108.787 185.025 106.91 185.633 104.943 186.168 cv97.1666 188.275 88.792 190.039 80.1661 190.308 cv77.2769 190.399 74.3921 190.591 71.3819 190.591 cv65.3658 190.591 59.3804 189.966 53.8184 188.967 cv33.2037 185.25 16.5088 172.912 7.88672 153.872 cv5.56495 148.747 3.9629 143.27 2.73438 137.595 cv1.45655 131.709 1.04688 125.841 0.650879 119.46 cv0.421387 115.842 0.443848 111.918 0.786133 108.368 cv1.20411 103.949 1.47022 99.7681 2.1626 95.5606 cv5.09668 77.6592 12.441 61.2388 26.211 49.0933 cv30.6524 45.1695 35.5845 42.2354 40.6783 39.6255 cv45.525 37.1368 50.6866 35.5621 56.0953 34.1397 cv57.7515 33.7032 59.9385 33.0601 61.7339 33.0601 cv62.022 33.0103 62.3101 32.9654 62.5982 32.9161 cv62.9356 32.8663 63.273 32.8213 63.606 32.772 cv63.9434 32.7222 64.2813 32.6773 64.6143 32.628 cv64.9961 32.5782 65.3834 32.5333 65.7657 32.4839 cv66.1485 32.4346 66.5357 32.3892 66.918 32.3399 cv67.314 32.1597 67.8809 32.1958 68.358 32.1958 cv68.7901 32.0206 69.4288 32.0518 69.9419 32.0518 cv70.5269 31.8135 71.4 31.9078 72.1021 31.9078 cv72.9839 31.5118 74.3428 31.8897 75.2701 31.6202 cvf75.2701 31.6202 mo79.3965 31.6202 83.4507 31.566 87.3614 31.9395 cv93.0992 32.4839 98.6338 33.2896 104.07 34.3423 cv105.236 34.5674 112.364 36.1695 112.657 36.8892 cv112.958 37.6363 112.211 39.7696 112.031 40.5523 cv111.131 44.4312 110.235 48.3106 109.335 52.1895 cv108.971 53.7149 106.595 65.0098 106.064 65.3521 cv105.974 65.3746 105.884 65.4014 105.79 65.4239 cv105.056 65.4644 104.138 64.9693 103.485 64.7623 cv102.248 64.398 101.01 64.0381 99.7725 63.6734 cv95.4659 62.3458 90.795 61.6216 86.0655 61.1714 cv69.8384 59.6236 56.5499 62.7735 46.8838 74.5137 cv37.9473 85.3589 35.6382 100.533 36.3716 116.149 cv36.9932 129.473 40.44 143.279 50.2588 151.946 cv58.5162 159.231 69.0196 160.932 81.0298 160.932 cv81.6553 160.617 82.8438 160.789 83.6216 160.789 cv84.0494 160.59 84.6836 160.645 85.2061 160.645 cv85.566 160.459 86.2002 160.5 86.646 160.5 cv87.0284 160.451 87.4156 160.406 87.7979 160.356 cv88.1353 160.307 88.4732 160.262 88.8062 160.212 cv89.1436 160.163 89.481 160.118 89.8135 160.068 cv90.1021 160.019 90.3902 159.974 90.6783 159.924 cv90.9659 159.876 91.254 159.83 91.5416 159.78 cv93.4542 159.326 95.3668 158.872 97.2794 158.417 cv99.5025 157.827 101.69 157.167 103.778 156.32 cv104.835 155.887 105.893 155.46 106.95 155.028 cv106.95 154.979 106.95 154.934 106.95 154.884 cv107 154.884 107.049 154.884 107.095 154.884 cv107.095 154.934 107.095 154.984 107.095 155.028 cv107.297 155.793 107.5 156.558 107.697 157.323 cv108.075 159.006 108.454 160.69 108.832 162.368 cv110.411 169.379 111.995 176.389 113.574 183.396 cv113.525 183.396 113.48 183.396 113.43 183.396 cv112.603 183.864 111.604 184.134 110.699 184.422 cv108.787 185.025 106.91 185.633 104.943 186.168 cv97.1666 188.275 88.792 190.039 80.1661 190.308 cv77.2769 190.399 74.3921 190.591 71.3819 190.591 cv65.3658 190.591 59.3804 189.966 53.8184 188.967 cv33.2037 185.25 16.5088 172.912 7.88672 153.872 cv5.56495 148.747 3.9629 143.27 2.73438 137.595 cv1.45655 131.709 1.04688 125.841 0.650879 119.46 cv0.421387 115.842 0.443848 111.918 0.786133 108.368 cv1.20411 103.949 1.47022 99.7681 2.1626 95.5606 cv5.09668 77.6592 12.441 61.2388 26.211 49.0933 cv30.6524 45.1695 35.5845 42.2354 40.6783 39.6255 cv45.525 37.1368 50.6866 35.5621 56.0953 34.1397 cv57.7515 33.7032 59.9385 33.0601 61.7339 33.0601 cv62.022 33.0103 62.3101 32.9654 62.5982 32.9161 cv62.9356 32.8663 63.273 32.8213 63.606 32.772 cv63.9434 32.7222 64.2813 32.6773 64.6143 32.628 cv64.9961 32.5782 65.3834 32.5333 65.7657 32.4839 cv66.1485 32.4346 66.5357 32.3892 66.918 32.3399 cv67.314 32.1597 67.8809 32.1958 68.358 32.1958 cv68.7901 32.0206 69.4288 32.0518 69.9419 32.0518 cv70.5269 31.8135 71.4 31.9078 72.1021 31.9078 cv72.9839 31.5118 74.3428 31.8897 75.2701 31.6202 cvcp@419.942 71.2198 mo424.402 71.2198 428.919 71.4942 433.185 71.9712 cv435.634 72.2999 438.082 72.6285 440.529 72.9522 cv440.853 72.9883 442.694 73.209 442.694 73.3799 cv442.744 73.3799 442.793 73.3799 442.837 73.3799 cv442.091 79.7203 441.344 86.0611 440.597 92.4014 cv440.385 94.2193 440.179 96.042 439.967 97.8599 cv439.954 98.0669 440.057 98.292 439.814 98.292 cv439.814 98.3414 439.814 98.3907 439.814 98.4361 cv439.764 98.4361 439.719 98.4361 439.669 98.4361 cv438.968 98.004 437.906 97.8643 437.096 97.6529 cv435.202 97.1534 433.293 96.7081 431.318 96.3975 cv422.646 95.0206 407.594 93.2608 404.912 103.459 cv404.404 105.38 404.638 107.859 405.416 109.511 cv406.15 111.077 407.684 112.373 409.097 113.327 cv414.722 117.126 421.292 119.267 427.539 121.833 cv435.949 125.284 444.899 131.584 448.134 140.637 cv449.169 143.536 449.66 146.519 449.925 149.84 cv450.281 154.335 449.813 158.921 448.611 162.804 cv447.05 167.822 444.39 172.421 440.638 176.3 cv428.2 189.133 409.421 191.668 390.273 190.475 cv385.531 190.178 380.472 189.728 376.04 188.653 cv374.96 188.387 373.389 188.396 372.543 187.712 cv372.507 187.649 372.472 187.586 372.431 187.518 cv372.121 186.614 372.795 183.401 372.949 182.379 cv373.592 177.583 374.24 172.786 374.884 167.988 cv375.114 166.211 375.347 164.433 375.577 162.656 cv375.585 162.444 375.487 162.229 375.734 162.229 cv375.734 162.179 375.734 162.133 375.734 162.084 cv378.29 162.787 380.743 163.839 383.371 164.496 cv389.463 166.017 395.359 166.404 402.374 166.404 cv402.739 166.234 403.351 166.26 403.814 166.26 cv404.152 166.211 404.489 166.167 404.823 166.117 cv405.443 165.958 406.064 165.801 406.681 165.644 cv407.806 165.356 408.935 164.964 409.97 164.465 cv414.902 162.057 417.98 156.743 415.267 151.171 cv414.236 149.062 412.175 147.635 410.258 146.442 cv404.431 142.82 397.658 140.993 391.318 138.392 cv386.673 136.484 382.294 133.626 378.731 129.708 cv374.303 124.834 372.215 118.984 371.679 112.116 cv370.64 98.8409 375.915 87.2579 386.39 80.4405 cv389.41 78.4693 392.465 76.9756 395.768 75.5894 cv398.144 74.586 400.665 73.8433 403.229 73.2042 cv404.368 72.9166 405.583 72.5157 406.837 72.5157 cv407.126 72.4664 407.415 72.4214 407.702 72.3721 cv407.99 72.3223 408.278 72.2774 408.566 72.2281 cv408.904 72.1783 409.242 72.1334 409.574 72.084 cv409.957 72.0342 410.343 71.9893 410.726 71.94 cv411.158 71.8902 411.59 71.8453 412.022 71.796 cv412.396 71.607 412.999 71.6519 413.462 71.6519 cv414.056 71.4087 414.919 71.5079 415.623 71.5079 cv416.603 71.0127 418.777 71.5166 419.942 71.2198 cvf419.942 71.2198 mo424.402 71.2198 428.919 71.4942 433.185 71.9712 cv435.634 72.2999 438.082 72.6285 440.529 72.9522 cv440.853 72.9883 442.694 73.209 442.694 73.3799 cv442.744 73.3799 442.793 73.3799 442.837 73.3799 cv442.091 79.7203 441.344 86.0611 440.597 92.4014 cv440.385 94.2193 440.179 96.042 439.967 97.8599 cv439.954 98.0669 440.057 98.292 439.814 98.292 cv439.814 98.3414 439.814 98.3907 439.814 98.4361 cv439.764 98.4361 439.719 98.4361 439.669 98.4361 cv438.968 98.004 437.906 97.8643 437.096 97.6529 cv435.202 97.1534 433.293 96.7081 431.318 96.3975 cv422.646 95.0206 407.594 93.2608 404.912 103.459 cv404.404 105.38 404.638 107.859 405.416 109.511 cv406.15 111.077 407.684 112.373 409.097 113.327 cv414.722 117.126 421.292 119.267 427.539 121.833 cv435.949 125.284 444.899 131.584 448.134 140.637 cv449.169 143.536 449.66 146.519 449.925 149.84 cv450.281 154.335 449.813 158.921 448.611 162.804 cv447.05 167.822 444.39 172.421 440.638 176.3 cv428.2 189.133 409.421 191.668 390.273 190.475 cv385.531 190.178 380.472 189.728 376.04 188.653 cv374.96 188.387 373.389 188.396 372.543 187.712 cv372.507 187.649 372.472 187.586 372.431 187.518 cv372.121 186.614 372.795 183.401 372.949 182.379 cv373.592 177.583 374.24 172.786 374.884 167.988 cv375.114 166.211 375.347 164.433 375.577 162.656 cv375.585 162.444 375.487 162.229 375.734 162.229 cv375.734 162.179 375.734 162.133 375.734 162.084 cv378.29 162.787 380.743 163.839 383.371 164.496 cv389.463 166.017 395.359 166.404 402.374 166.404 cv402.739 166.234 403.351 166.26 403.814 166.26 cv404.152 166.211 404.489 166.167 404.823 166.117 cv405.443 165.958 406.064 165.801 406.681 165.644 cv407.806 165.356 408.935 164.964 409.97 164.465 cv414.902 162.057 417.98 156.743 415.267 151.171 cv414.236 149.062 412.175 147.635 410.258 146.442 cv404.431 142.82 397.658 140.993 391.318 138.392 cv386.673 136.484 382.294 133.626 378.731 129.708 cv374.303 124.834 372.215 118.984 371.679 112.116 cv370.64 98.8409 375.915 87.2579 386.39 80.4405 cv389.41 78.4693 392.465 76.9756 395.768 75.5894 cv398.144 74.586 400.665 73.8433 403.229 73.2042 cv404.368 72.9166 405.583 72.5157 406.837 72.5157 cv407.126 72.4664 407.415 72.4214 407.702 72.3721 cv407.99 72.3223 408.278 72.2774 408.566 72.2281 cv408.904 72.1783 409.242 72.1334 409.574 72.084 cv409.957 72.0342 410.343 71.9893 410.726 71.94 cv411.158 71.8902 411.59 71.8453 412.022 71.796 cv412.396 71.607 412.999 71.6519 413.462 71.6519 cv414.056 71.4087 414.919 71.5079 415.623 71.5079 cv416.603 71.0127 418.777 71.5166 419.942 71.2198 cvcp@509.415 71.2198 mo513.927 71.2198 518.491 71.4898 522.801 71.9712 cv525.25 72.2999 527.698 72.6285 530.146 72.9522 cv530.478 72.9883 532.31 73.209 532.31 73.3799 cv532.36 73.3799 532.41 73.3799 532.455 73.3799 cv531.446 81.732 530.438 90.084 529.43 98.4361 cv529.38 98.4361 529.335 98.4361 529.286 98.4361 cv527.95 97.671 525.272 97.3062 523.679 96.9556 cv515.323 95.1148 497.097 92.6265 494.56 103.323 cv494.064 105.394 494.164 107.823 495.085 109.624 cv497.097 113.547 503.785 116.356 507.65 117.944 cv511.115 119.371 514.581 120.796 518.041 122.219 cv525.429 125.09 534.344 131.84 537.319 139.629 cv538.668 143.175 539.326 146.676 539.523 150.848 cv539.722 155.078 539.29 159.313 538.138 163.061 cv536.594 168.069 533.782 172.525 530.105 176.44 cv518.244 189.062 498.407 191.631 479.889 190.475 cv474.949 190.165 470.138 189.53 465.485 188.617 cv464.769 188.472 462.51 188.184 462.119 187.675 cv461.633 187.046 463.164 178.064 463.326 176.625 cv463.5 175.026 465.007 162.714 465.426 162.359 cv465.44 162.35 465.454 162.341 465.467 162.333 cv465.8 162.188 471.047 163.943 471.848 164.186 cv478.062 166.049 484.727 166.404 491.99 166.404 cv492.355 166.234 492.966 166.26 493.43 166.26 cv493.718 166.211 494.006 166.167 494.293 166.117 cv494.582 166.067 494.87 166.022 495.158 165.972 cv495.685 165.819 496.21 165.671 496.733 165.518 cv497.804 165.208 498.893 164.838 499.874 164.325 cv504.703 161.778 507.731 156.311 504.734 150.888 cv503.619 148.873 501.552 147.459 499.663 146.317 cv493.876 142.811 487.207 140.966 480.933 138.392 cv476.298 136.488 471.907 133.626 468.347 129.708 cv463.982 124.905 461.822 119.146 461.295 112.404 cv459.806 93.378 470.161 81.4351 486.054 75.3238 cv488.242 74.4781 490.514 73.7847 492.845 73.2042 cv493.974 72.921 495.199 72.5157 496.455 72.5157 cv496.742 72.4664 497.03 72.4214 497.318 72.3721 cv497.606 72.3223 497.894 72.2774 498.182 72.2281 cv498.519 72.1783 498.857 72.1334 499.19 72.084 cv499.527 72.0342 499.865 71.9893 500.198 71.94 cv500.63 71.8902 501.062 71.8453 501.494 71.796 cv501.921 71.5977 502.556 71.6519 503.078 71.6519 cv503.582 71.3956 504.456 71.5079 505.094 71.5079 cv506.076 71.0127 508.249 71.5166 509.415 71.2198 cvf509.415 71.2198 mo513.927 71.2198 518.491 71.4898 522.801 71.9712 cv525.25 72.2999 527.698 72.6285 530.146 72.9522 cv530.478 72.9883 532.31 73.209 532.31 73.3799 cv532.36 73.3799 532.41 73.3799 532.455 73.3799 cv531.446 81.732 530.438 90.084 529.43 98.4361 cv529.38 98.4361 529.335 98.4361 529.286 98.4361 cv527.95 97.671 525.272 97.3062 523.679 96.9556 cv515.323 95.1148 497.097 92.6265 494.56 103.323 cv494.064 105.394 494.164 107.823 495.085 109.624 cv497.097 113.547 503.785 116.356 507.65 117.944 cv511.115 119.371 514.581 120.796 518.041 122.219 cv525.429 125.09 534.344 131.84 537.319 139.629 cv538.668 143.175 539.326 146.676 539.523 150.848 cv539.722 155.078 539.29 159.313 538.138 163.061 cv536.594 168.069 533.782 172.525 530.105 176.44 cv518.244 189.062 498.407 191.631 479.889 190.475 cv474.949 190.165 470.138 189.53 465.485 188.617 cv464.769 188.472 462.51 188.184 462.119 187.675 cv461.633 187.046 463.164 178.064 463.326 176.625 cv463.5 175.026 465.007 162.714 465.426 162.359 cv465.44 162.35 465.454 162.341 465.467 162.333 cv465.8 162.188 471.047 163.943 471.848 164.186 cv478.062 166.049 484.727 166.404 491.99 166.404 cv492.355 166.234 492.966 166.26 493.43 166.26 cv493.718 166.211 494.006 166.167 494.293 166.117 cv494.582 166.067 494.87 166.022 495.158 165.972 cv495.685 165.819 496.21 165.671 496.733 165.518 cv497.804 165.208 498.893 164.838 499.874 164.325 cv504.703 161.778 507.731 156.311 504.734 150.888 cv503.619 148.873 501.552 147.459 499.663 146.317 cv493.876 142.811 487.207 140.966 480.933 138.392 cv476.298 136.488 471.907 133.626 468.347 129.708 cv463.982 124.905 461.822 119.146 461.295 112.404 cv459.806 93.378 470.161 81.4351 486.054 75.3238 cv488.242 74.4781 490.514 73.7847 492.845 73.2042 cv493.974 72.921 495.199 72.5157 496.455 72.5157 cv496.742 72.4664 497.03 72.4214 497.318 72.3721 cv497.606 72.3223 497.894 72.2774 498.182 72.2281 cv498.519 72.1783 498.857 72.1334 499.19 72.084 cv499.527 72.0342 499.865 71.9893 500.198 71.94 cv500.63 71.8902 501.062 71.8453 501.494 71.796 cv501.921 71.5977 502.556 71.6519 503.078 71.6519 cv503.582 71.3956 504.456 71.5079 505.094 71.5079 cv506.076 71.0127 508.249 71.5166 509.415 71.2198 cvcp@325.886 116.004 mo313.025 116.004 300.16 116.004 287.294 116.004 cv287.294 114.218 287.677 112.522 288.095 110.942 cv289.76 104.597 293.891 98.3145 300.254 95.8438 cv301.838 95.2227 303.512 94.8267 305.299 94.5972 cv305.978 94.5074 306.666 94.5928 307.31 94.4039 cv320.185 94.4039 326.66 103.557 325.886 116.004 cvcp357.242 114.997 mo355.136 96.0464 345.497 79.7247 327.007 73.8882 cv321.049 72.003 314.506 71.2198 307.598 71.2198 cv306.545 71.5303 305.015 71.0982 303.998 71.5079 cv303.454 71.5079 302.707 71.4312 302.27 71.6519 cv301.816 71.6519 301.195 71.6114 300.83 71.796 cv300.448 71.8453 300.061 71.8902 299.678 71.94 cv299.345 71.9893 299.008 72.0342 298.67 72.084 cv298.13 72.084 297.514 72.1377 297.086 72.3721 cv295.88 72.3721 294.701 72.7857 293.621 73.0606 cv289.792 74.0142 286.21 75.4048 282.794 77.2051 cv262.783 87.7349 254.318 108.903 254.318 132.132 cv254.318 138.018 254.525 143.9 255.686 149.25 cv257.243 156.45 259.079 163.066 262.886 169.091 cv275.324 188.788 300.07 192.473 324.014 190.196 cv332.132 189.421 339.827 187.865 347.203 185.579 cv349.228 184.949 351.536 184.45 353.39 183.396 cv353.633 183.396 353.512 183.167 353.485 182.969 cv353.26 181.192 353.035 179.409 352.81 177.632 cv352.045 171.395 351.275 165.153 350.51 158.917 cv350.366 158.917 350.222 158.917 350.078 158.917 cv350.078 159.191 349.07 159.452 348.814 159.565 cv345.672 160.932 342.482 162.138 339.121 163.051 cv337.352 163.498 335.579 163.943 333.806 164.388 cv333.275 164.388 332.65 164.46 332.222 164.676 cv331.934 164.726 331.646 164.771 331.358 164.821 cv331.07 164.87 330.782 164.916 330.494 164.964 cv330.161 165.014 329.824 165.059 329.486 165.109 cv329.153 165.158 328.816 165.203 328.478 165.252 cv328.145 165.301 327.808 165.346 327.47 165.396 cv327.038 165.446 326.606 165.491 326.174 165.541 cv325.72 165.541 325.103 165.513 324.734 165.684 cv324.158 165.684 323.47 165.613 323.006 165.829 cv322.25 165.829 321.175 165.662 320.558 165.972 cv315.496 165.972 310.775 165.887 306.307 164.919 cv292.744 161.981 286.718 151.653 286.718 137.604 cv310.001 137.604 333.28 137.604 356.558 137.604 cv356.837 134.819 357.112 132.034 357.386 129.249 cv357.827 124.582 357.755 119.618 357.242 114.997 cvf325.886 116.004 mo313.025 116.004 300.16 116.004 287.294 116.004 cv287.294 114.218 287.677 112.522 288.095 110.942 cv289.76 104.597 293.891 98.3145 300.254 95.8438 cv301.838 95.2227 303.512 94.8267 305.299 94.5972 cv305.978 94.5074 306.666 94.5928 307.31 94.4039 cv320.185 94.4039 326.66 103.557 325.886 116.004 cvcp357.242 114.997 mo355.136 96.0464 345.497 79.7247 327.007 73.8882 cv321.049 72.003 314.506 71.2198 307.598 71.2198 cv306.545 71.5303 305.015 71.0982 303.998 71.5079 cv303.454 71.5079 302.707 71.4312 302.27 71.6519 cv301.816 71.6519 301.195 71.6114 300.83 71.796 cv300.448 71.8453 300.061 71.8902 299.678 71.94 cv299.345 71.9893 299.008 72.0342 298.67 72.084 cv298.13 72.084 297.514 72.1377 297.086 72.3721 cv295.88 72.3721 294.701 72.7857 293.621 73.0606 cv289.792 74.0142 286.21 75.4048 282.794 77.2051 cv262.783 87.7349 254.318 108.903 254.318 132.132 cv254.318 138.018 254.525 143.9 255.686 149.25 cv257.243 156.45 259.079 163.066 262.886 169.091 cv275.324 188.788 300.07 192.473 324.014 190.196 cv332.132 189.421 339.827 187.865 347.203 185.579 cv349.228 184.949 351.536 184.45 353.39 183.396 cv353.633 183.396 353.512 183.167 353.485 182.969 cv353.26 181.192 353.035 179.409 352.81 177.632 cv352.045 171.395 351.275 165.153 350.51 158.917 cv350.366 158.917 350.222 158.917 350.078 158.917 cv350.078 159.191 349.07 159.452 348.814 159.565 cv345.672 160.932 342.482 162.138 339.121 163.051 cv337.352 163.498 335.579 163.943 333.806 164.388 cv333.275 164.388 332.65 164.46 332.222 164.676 cv331.934 164.726 331.646 164.771 331.358 164.821 cv331.07 164.87 330.782 164.916 330.494 164.964 cv330.161 165.014 329.824 165.059 329.486 165.109 cv329.153 165.158 328.816 165.203 328.478 165.252 cv328.145 165.301 327.808 165.346 327.47 165.396 cv327.038 165.446 326.606 165.491 326.174 165.541 cv325.72 165.541 325.103 165.513 324.734 165.684 cv324.158 165.684 323.47 165.613 323.006 165.829 cv322.25 165.829 321.175 165.662 320.558 165.972 cv315.496 165.972 310.775 165.887 306.307 164.919 cv292.744 161.981 286.718 151.653 286.718 137.604 cv310.001 137.604 333.28 137.604 356.558 137.604 cv356.837 134.819 357.112 132.034 357.386 129.249 cv357.827 124.582 357.755 119.618 357.242 114.997 cvcp@151.814 179.508 mo151.814 179.747 151.707 180.373 151.958 180.373 cv151.909 180.084 151.864 179.796 151.814 179.508 cvf151.814 179.508 mo151.814 179.747 151.707 180.373 151.958 180.373 cv151.909 180.084 151.864 179.796 151.814 179.508 cvcp@152.966 179.653 mo152.966 179.796 152.966 179.941 152.966 180.084 cv152.966 179.941 152.966 179.796 152.966 179.653 cvf152.966 179.653 mo152.966 179.796 152.966 179.941 152.966 180.084 cv152.966 179.941 152.966 179.796 152.966 179.653 cvcp@150.662 180.661 mo150.662 180.804 150.662 180.948 150.662 181.092 cv150.662 180.948 150.662 180.804 150.662 180.661 cvf150.662 180.661 mo150.662 180.804 150.662 180.948 150.662 181.092 cv150.662 180.948 150.662 180.804 150.662 180.661 cvcp@640.837 0.5 mo647.511 0.5 654.185 0.5 660.854 0.5 cv660.854 7.12403 660.854 13.7481 660.854 20.3721 cv654.18 20.3721 647.511 20.3721 640.837 20.3721 cv640.837 13.7481 640.837 7.12403 640.837 0.5 cvf640.837 0.5 mo647.511 0.5 654.185 0.5 660.854 0.5 cv660.854 7.12403 660.854 13.7481 660.854 20.3721 cv654.18 20.3721 647.511 20.3721 640.837 20.3721 cv640.837 13.7481 640.837 7.12403 640.837 0.5 cvcp@601.238 87.9961 mo607.862 87.9961 614.486 87.9961 621.11 87.9961 cv621.11 94.6202 621.11 101.244 621.11 107.868 cv614.486 107.868 607.862 107.868 601.238 107.868 cv601.238 101.244 601.238 94.6202 601.238 87.9961 cvf601.238 87.9961 mo607.862 87.9961 614.486 87.9961 621.11 87.9961 cv621.11 94.6202 621.11 101.244 621.11 107.868 cv614.486 107.868 607.862 107.868 601.238 107.868 cv601.238 101.244 601.238 94.6202 601.238 87.9961 cvcp@680.726 87.9961 mo687.4 87.9961 694.073 87.9961 700.742 87.9961 cv700.742 94.6202 700.742 101.244 700.742 107.868 cv694.069 107.868 687.4 107.868 680.726 107.868 cv680.726 101.244 680.726 94.6202 680.726 87.9961 cvf680.726 87.9961 mo687.4 87.9961 694.073 87.9961 700.742 87.9961 cv700.742 94.6202 700.742 101.244 700.742 107.868 cv694.069 107.868 687.4 107.868 680.726 107.868 cv680.726 101.244 680.726 94.6202 680.726 87.9961 cvcp@640.837 128.028 mo647.511 128.028 654.185 128.028 660.854 128.028 cv660.854 134.702 660.854 141.376 660.854 148.044 cv654.18 148.044 647.511 148.044 640.837 148.044 cv640.837 141.371 640.837 134.702 640.837 128.028 cvf640.837 128.028 mo647.511 128.028 654.185 128.028 660.854 128.028 cv660.854 134.702 660.854 141.376 660.854 148.044 cv654.18 148.044 647.511 148.044 640.837 148.044 cv640.837 141.371 640.837 134.702 640.837 128.028 cvcp@581.366 148.188 mo588.04 148.188 594.712 148.188 601.382 148.188 cv601.382 154.862 601.382 161.536 601.382 168.205 cv607.957 168.205 614.536 168.205 621.11 168.205 cv621.11 174.829 621.11 181.452 621.11 188.076 cv627.734 188.076 634.358 188.076 640.982 188.076 cv640.982 194.75 640.982 201.423 640.982 208.092 cv634.308 208.092 627.639 208.092 620.966 208.092 cv620.966 201.468 620.966 194.844 620.966 188.22 cv614.437 188.22 607.912 188.22 601.382 188.22 cv601.382 194.844 601.382 201.468 601.382 208.092 cv594.708 208.092 588.04 208.092 581.366 208.092 cv581.366 203.628 581.366 199.165 581.366 194.7 cv581.366 192.937 581.105 190.241 581.452 188.67 cv581.502 188.549 581.55 188.427 581.595 188.305 cv582.023 187.875 595.757 188.076 597.638 188.076 cv598.632 188.076 600.032 188.265 600.877 187.915 cv600.905 187.901 600.937 187.887 600.963 187.875 cv601 187.82 601.04 187.771 601.076 187.716 cv601.472 186.762 601.238 183.864 601.238 182.604 cv601.238 177.803 601.238 173.006 601.238 168.205 cv594.614 168.205 587.99 168.205 581.366 168.205 cv581.366 161.531 581.366 154.862 581.366 148.188 cvf581.366 148.188 mo588.04 148.188 594.712 148.188 601.382 148.188 cv601.382 154.862 601.382 161.536 601.382 168.205 cv607.957 168.205 614.536 168.205 621.11 168.205 cv621.11 174.829 621.11 181.452 621.11 188.076 cv627.734 188.076 634.358 188.076 640.982 188.076 cv640.982 194.75 640.982 201.423 640.982 208.092 cv634.308 208.092 627.639 208.092 620.966 208.092 cv620.966 201.468 620.966 194.844 620.966 188.22 cv614.437 188.22 607.912 188.22 601.382 188.22 cv601.382 194.844 601.382 201.468 601.382 208.092 cv594.708 208.092 588.04 208.092 581.366 208.092 cv581.366 203.628 581.366 199.165 581.366 194.7 cv581.366 192.937 581.105 190.241 581.452 188.67 cv581.502 188.549 581.55 188.427 581.595 188.305 cv582.023 187.875 595.757 188.076 597.638 188.076 cv598.632 188.076 600.032 188.265 600.877 187.915 cv600.905 187.901 600.937 187.887 600.963 187.875 cv601 187.82 601.04 187.771 601.076 187.716 cv601.472 186.762 601.238 183.864 601.238 182.604 cv601.238 177.803 601.238 173.006 601.238 168.205 cv594.614 168.205 587.99 168.205 581.366 168.205 cv581.366 161.531 581.366 154.862 581.366 148.188 cvcp@640.837 168.061 mo647.511 168.061 654.185 168.061 660.854 168.061 cv660.854 174.684 660.854 181.308 660.854 187.932 cv654.18 187.932 647.511 187.932 640.837 187.932 cv640.837 181.308 640.837 174.684 640.837 168.061 cvf640.837 168.061 mo647.511 168.061 654.185 168.061 660.854 168.061 cv660.854 174.684 660.854 181.308 660.854 187.932 cv654.18 187.932 647.511 187.932 640.837 187.932 cv640.837 181.308 640.837 174.684 640.837 168.061 cvcp@658.694 208.38 mo654.473 208.38 650.248 208.38 646.022 208.38 cv644.749 208.38 642.359 208.106 641.337 208.538 cv641.318 208.546 641.304 208.563 641.287 208.574 cv641.287 215.138 641.287 221.704 641.287 228.264 cv641.029 228.264 640.77 228.264 640.511 228.264 cv639.473 228.611 636.718 228.396 635.51 228.396 cv630.664 228.396 625.812 228.396 620.966 228.396 cv620.966 221.728 620.966 215.054 620.966 208.38 cv616.214 208.38 611.462 208.38 606.71 208.38 cv605.369 208.38 602.808 208.087 601.738 208.538 cv601.688 208.579 601.634 208.614 601.58 208.65 cv601.562 208.681 601.552 208.721 601.537 208.754 cv601.537 215.258 601.537 221.763 601.537 228.264 cv601.322 228.264 601.107 228.264 600.893 228.264 cv600.857 228.278 600.823 228.292 600.789 228.306 cv599.195 228.662 596.391 228.396 594.614 228.396 cv590.199 228.396 585.781 228.396 581.366 228.396 cv581.366 221.728 581.366 215.054 581.366 208.38 cv405.551 208.38 4.40333 208.38 4.40333 208.38 cv4.40333 234.012 li4.40333 234.012 488.113 234.012 700.885 234.012 cv700.885 225.471 700.885 216.925 700.885 208.38 cv686.823 208.38 672.756 208.38 658.694 208.38 cvf658.694 208.38 mo654.473 208.38 650.248 208.38 646.022 208.38 cv644.749 208.38 642.359 208.106 641.337 208.538 cv641.318 208.546 641.304 208.563 641.287 208.574 cv641.287 215.138 641.287 221.704 641.287 228.264 cv641.029 228.264 640.77 228.264 640.511 228.264 cv639.473 228.611 636.718 228.396 635.51 228.396 cv630.664 228.396 625.812 228.396 620.966 228.396 cv620.966 221.728 620.966 215.054 620.966 208.38 cv616.214 208.38 611.462 208.38 606.71 208.38 cv605.369 208.38 602.808 208.087 601.738 208.538 cv601.688 208.579 601.634 208.614 601.58 208.65 cv601.562 208.681 601.552 208.721 601.537 208.754 cv601.537 215.258 601.537 221.763 601.537 228.264 cv601.322 228.264 601.107 228.264 600.893 228.264 cv600.857 228.278 600.823 228.292 600.789 228.306 cv599.195 228.662 596.391 228.396 594.614 228.396 cv590.199 228.396 585.781 228.396 581.366 228.396 cv581.366 221.728 581.366 215.054 581.366 208.38 cv405.551 208.38 4.40333 208.38 4.40333 208.38 cv4.40333 234.012 li4.40333 234.012 488.113 234.012 700.885 234.012 cv700.885 225.471 700.885 216.925 700.885 208.38 cv686.823 208.38 672.756 208.38 658.694 208.38 cvcp@242.144 297.066 mo242.144 297.066 197.623 293.019 92.9664 302.849 cv53.6485 307.474 43.2413 308.63 43.2413 308.63 cv28.2076 328.291 li111.47 313.257 li0 1 1 0 cmykf424.75 303.398 mo0 0 0 1 cmykf424.75 303.398 mo@4.63916 276.342 mo4.63916 270.518 li30.6392 270.518 li30.6392 276.342 li4.63916 276.342 li0 0 0 0 cmykf4.63916 276.342 mo4.63916 270.518 li30.6392 270.518 li30.6392 276.342 li4.63916 276.342 licp@67.2989 259.079 mo55.5464 259.079 li53.8306 268.126 li64.9585 268.126 li63.8668 273.691 li52.7906 273.691 li49.9825 288.458 li43.3267 288.458 li49.9825 253.359 li68.3907 253.359 li67.2989 259.079 lif67.2989 259.079 mo55.5464 259.079 li53.8306 268.126 li64.9585 268.126 li63.8668 273.691 li52.7906 273.691 li49.9825 288.458 li43.3267 288.458 li49.9825 253.359 li68.3907 253.359 li67.2989 259.079 licp@87.2569 258.871 mo79.7691 258.871 74.9332 266.722 74.9332 275.094 cv74.9332 280.035 77.3252 282.894 81.7452 282.894 cv88.8692 282.894 94.1729 275.354 94.1729 266.411 cv94.1729 261.886 91.9893 258.871 87.2569 258.871 cvcp80.8091 289.031 mo71.917 289.031 67.8091 284.195 67.8091 276.239 cv67.8091 263.55 76.7012 252.787 88.3492 252.787 cv96.8252 252.787 101.297 257.466 101.297 265.63 cv101.297 279.151 92.0411 289.031 80.8091 289.031 cvf87.2569 258.871 mo79.7691 258.871 74.9332 266.722 74.9332 275.094 cv74.9332 280.035 77.3252 282.894 81.7452 282.894 cv88.8692 282.894 94.1729 275.354 94.1729 266.411 cv94.1729 261.886 91.9893 258.871 87.2569 258.871 cvcp80.8091 289.031 mo71.917 289.031 67.8091 284.195 67.8091 276.239 cv67.8091 263.55 76.7012 252.787 88.3492 252.787 cv96.8252 252.787 101.297 257.466 101.297 265.63 cv101.297 279.151 92.0411 289.031 80.8091 289.031 cvcp@120.485 288.458 mo102.701 288.458 li109.357 253.359 li116.013 253.359 li110.449 282.531 li121.629 282.531 li120.485 288.458 lif120.485 288.458 mo102.701 288.458 li109.357 253.359 li116.013 253.359 li110.449 282.531 li121.629 282.531 li120.485 288.458 licp@141.078 270.831 mo149.865 288.458 li141.598 288.458 li134.37 271.611 li131.146 288.458 li124.542 288.458 li131.197 253.359 li137.801 253.359 li134.786 269.27 li147.941 253.359 li156.418 253.359 li141.078 270.831 lif141.078 270.831 mo149.865 288.458 li141.598 288.458 li134.37 271.611 li131.146 288.458 li124.542 288.458 li131.197 253.359 li137.801 253.359 li134.786 269.27 li147.941 253.359 li156.418 253.359 li141.078 270.831 licp@178.622 259.027 mo166.557 259.027 li164.894 267.659 li176.385 267.659 li175.293 273.17 li163.854 273.17 li162.085 282.686 li174.097 282.686 li173.005 288.458 li154.337 288.458 li160.993 253.359 li179.661 253.359 li178.622 259.027 lif178.622 259.027 mo166.557 259.027 li164.894 267.659 li176.385 267.659 li175.293 273.17 li163.854 273.17 li162.085 282.686 li174.097 282.686 li173.005 288.458 li154.337 288.458 li160.993 253.359 li179.661 253.359 li178.622 259.027 licp@206.649 259.13 mo197.757 259.13 li192.141 288.458 li185.537 288.458 li191.101 259.13 li182.209 259.13 li183.301 253.359 li207.689 253.359 li206.649 259.13 lif206.649 259.13 mo197.757 259.13 li192.141 288.458 li185.537 288.458 li191.101 259.13 li182.209 259.13 li183.301 253.359 li207.689 253.359 li206.649 259.13 licp@226.346 259.182 mo224.838 258.663 222.758 258.403 221.302 258.403 cv216.934 258.403 215.062 260.638 215.062 262.978 cv215.062 268.283 225.202 268.439 225.202 276.863 cv225.202 283.623 219.17 289.031 210.59 289.031 cv208.354 289.031 206.014 288.823 204.194 288.407 cv205.39 282.01 li206.898 282.583 209.394 283.102 211.266 283.102 cv215.634 283.102 217.922 281.075 217.922 278.006 cv217.922 272.911 207.938 272.911 207.938 264.279 cv207.938 258.195 212.566 252.787 221.77 252.787 cv223.746 252.787 225.514 252.89 227.49 253.254 cv226.346 259.182 lif226.346 259.182 mo224.838 258.663 222.758 258.403 221.302 258.403 cv216.934 258.403 215.062 260.638 215.062 262.978 cv215.062 268.283 225.202 268.439 225.202 276.863 cv225.202 283.623 219.17 289.031 210.59 289.031 cv208.354 289.031 206.014 288.823 204.194 288.407 cv205.39 282.01 li206.898 282.583 209.394 283.102 211.266 283.102 cv215.634 283.102 217.922 281.075 217.922 278.006 cv217.922 272.911 207.938 272.911 207.938 264.279 cv207.938 258.195 212.566 252.787 221.77 252.787 cv223.746 252.787 225.514 252.89 227.49 253.254 cv226.346 259.182 licp@278.761 288.458 mo272.261 288.458 li275.329 272.235 li275.953 269.062 275.433 267.71 273.873 267.71 cv270.805 267.71 265.969 275.042 264.669 281.907 cv263.421 288.458 li256.921 288.458 li260.041 272.235 li260.665 269.062 260.145 267.71 258.585 267.71 cv255.517 267.71 250.681 275.146 249.381 281.907 cv248.133 288.458 li241.633 288.458 li245.533 267.867 li245.585 267.71 li244.441 267.502 242.725 267.294 241.217 267.191 cv241.997 263.031 li245.325 262.615 249.381 262.458 252.813 262.562 cv252.345 265.163 251.461 267.918 250.473 270.623 cv250.577 270.674 li252.969 266.046 256.453 262.042 261.341 262.042 cv264.461 262.042 266.541 263.758 266.541 267.086 cv266.541 268.126 266.333 269.115 265.813 270.831 cv265.865 270.831 li268.257 266.046 271.845 262.042 276.681 262.042 cv281.621 262.042 283.129 265.579 282.193 270.623 cv278.761 288.458 lif278.761 288.458 mo272.261 288.458 li275.329 272.235 li275.953 269.062 275.433 267.71 273.873 267.71 cv270.805 267.71 265.969 275.042 264.669 281.907 cv263.421 288.458 li256.921 288.458 li260.041 272.235 li260.665 269.062 260.145 267.71 258.585 267.71 cv255.517 267.71 250.681 275.146 249.381 281.907 cv248.133 288.458 li241.633 288.458 li245.533 267.867 li245.585 267.71 li244.441 267.502 242.725 267.294 241.217 267.191 cv241.997 263.031 li245.325 262.615 249.381 262.458 252.813 262.562 cv252.345 265.163 251.461 267.918 250.473 270.623 cv250.577 270.674 li252.969 266.046 256.453 262.042 261.341 262.042 cv264.461 262.042 266.541 263.758 266.541 267.086 cv266.541 268.126 266.333 269.115 265.813 270.831 cv265.865 270.831 li268.257 266.046 271.845 262.042 276.681 262.042 cv281.621 262.042 283.129 265.579 282.193 270.623 cv278.761 288.458 licp@300.704 267.762 mo295.868 267.762 292.956 273.535 292.956 278.682 cv292.956 281.491 294.1 283.258 297.116 283.258 cv301.744 283.258 304.968 278.111 304.968 272.338 cv304.968 269.375 303.72 267.762 300.704 267.762 cvcp296.232 288.978 mo289.004 288.978 286.144 285.546 286.144 279.722 cv286.144 268.907 293.424 262.094 301.692 262.094 cv309.076 262.094 311.832 266.046 311.832 271.506 cv311.832 282.166 304.344 288.978 296.232 288.978 cvf300.704 267.762 mo295.868 267.762 292.956 273.535 292.956 278.682 cv292.956 281.491 294.1 283.258 297.116 283.258 cv301.744 283.258 304.968 278.111 304.968 272.338 cv304.968 269.375 303.72 267.762 300.704 267.762 cvcp296.232 288.978 mo289.004 288.978 286.144 285.546 286.144 279.722 cv286.144 268.907 293.424 262.094 301.692 262.094 cv309.076 262.094 311.832 266.046 311.832 271.506 cv311.832 282.166 304.344 288.978 296.232 288.978 cvcp@331.593 267.762 mo327.849 267.762 323.325 276.239 322.285 281.594 cv321.92 283.363 li322.805 283.571 323.688 283.726 324.833 283.726 cv330.812 283.726 333.568 276.758 333.568 271.35 cv333.568 268.802 332.84 267.762 331.593 267.762 cvcp323.688 288.926 mo320.309 288.926 317.345 288.615 314.537 287.991 cv320.672 255.699 li320.725 255.594 li319.529 255.386 317.865 255.178 316.356 255.075 cv317.137 250.915 li320.413 250.499 324.469 250.342 328.212 250.447 cv326.081 261.523 li325.665 263.863 324.885 266.306 323.221 270.831 cv323.325 270.831 li325.977 265.682 329.617 262.042 334.192 262.042 cv338.145 262.042 340.276 264.59 340.276 270.102 cv340.276 279.878 335.024 288.926 323.688 288.926 cvf331.593 267.762 mo327.849 267.762 323.325 276.239 322.285 281.594 cv321.92 283.363 li322.805 283.571 323.688 283.726 324.833 283.726 cv330.812 283.726 333.568 276.758 333.568 271.35 cv333.568 268.802 332.84 267.762 331.593 267.762 cvcp323.688 288.926 mo320.309 288.926 317.345 288.615 314.537 287.991 cv320.672 255.699 li320.725 255.594 li319.529 255.386 317.865 255.178 316.356 255.075 cv317.137 250.915 li320.413 250.499 324.469 250.342 328.212 250.447 cv326.081 261.523 li325.665 263.863 324.885 266.306 323.221 270.831 cv323.325 270.831 li325.977 265.682 329.617 262.042 334.192 262.042 cv338.145 262.042 340.276 264.59 340.276 270.102 cv340.276 279.878 335.024 288.926 323.688 288.926 cvcp@353.588 259.287 mo351.3 259.287 349.74 257.466 349.74 255.542 cv349.74 253.046 351.82 251.226 354.108 251.226 cv356.396 251.226 357.956 252.995 357.956 254.867 cv357.956 257.466 355.876 259.287 353.588 259.287 cvcp350.78 288.458 mo344.28 288.458 li348.232 267.815 li348.232 267.71 li347.088 267.502 345.372 267.294 343.864 267.191 cv344.644 263.031 li347.972 262.615 351.976 262.458 355.72 262.562 cv350.78 288.458 lif353.588 259.287 mo351.3 259.287 349.74 257.466 349.74 255.542 cv349.74 253.046 351.82 251.226 354.108 251.226 cv356.396 251.226 357.956 252.995 357.956 254.867 cv357.956 257.466 355.876 259.287 353.588 259.287 cvcp350.78 288.458 mo344.28 288.458 li348.232 267.815 li348.232 267.71 li347.088 267.502 345.372 267.294 343.864 267.191 cv344.644 263.031 li347.972 262.615 351.976 262.458 355.72 262.562 cv350.78 288.458 licp@365.438 288.458 mo358.938 288.458 li365.178 255.699 li365.23 255.594 li364.034 255.386 362.318 255.178 360.862 255.075 cv361.59 250.915 li364.918 250.499 368.922 250.342 372.666 250.447 cv365.438 288.458 lif365.438 288.458 mo358.938 288.458 li365.178 255.699 li365.23 255.594 li364.034 255.386 362.318 255.178 360.862 255.075 cv361.59 250.915 li364.918 250.499 368.922 250.342 372.666 250.447 cv365.438 288.458 licp@387.381 267.762 mo382.545 267.762 379.633 273.535 379.633 278.682 cv379.633 281.491 380.778 283.258 383.793 283.258 cv388.421 283.258 391.645 278.111 391.645 272.338 cv391.645 269.375 390.398 267.762 387.381 267.762 cvcp382.91 288.978 mo375.681 288.978 372.822 285.546 372.822 279.722 cv372.822 268.907 380.101 262.094 388.37 262.094 cv395.753 262.094 398.509 266.046 398.509 271.506 cv398.509 282.166 391.022 288.978 382.91 288.978 cvf387.381 267.762 mo382.545 267.762 379.633 273.535 379.633 278.682 cv379.633 281.491 380.778 283.258 383.793 283.258 cv388.421 283.258 391.645 278.111 391.645 272.338 cv391.645 269.375 390.398 267.762 387.381 267.762 cvcp382.91 288.978 mo375.681 288.978 372.822 285.546 372.822 279.722 cv372.822 268.907 380.101 262.094 388.37 262.094 cv395.753 262.094 398.509 266.046 398.509 271.506 cv398.509 282.166 391.022 288.978 382.91 288.978 cvcp@419.673 267.762 mo415.929 267.762 411.406 276.239 410.313 281.594 cv410.001 283.258 li410.885 283.518 411.977 283.726 412.914 283.726 cv418.841 283.726 421.597 276.758 421.597 271.35 cv421.597 268.802 420.921 267.762 419.673 267.762 cvcp411.769 288.926 mo410.834 288.926 410.001 288.875 408.961 288.718 cv406.622 300.991 li400.122 300.991 li406.465 267.815 li406.465 267.71 li405.322 267.502 403.605 267.294 402.097 267.191 cv402.877 263.031 li406.206 262.615 410.261 262.458 413.693 262.562 cv413.277 264.59 412.706 266.722 411.353 270.726 cv411.458 270.779 li414.005 265.682 417.698 262.042 422.273 262.042 cv426.225 262.042 428.357 264.59 428.357 270.102 cv428.357 279.878 423.105 288.926 411.769 288.926 cvf419.673 267.762 mo415.929 267.762 411.406 276.239 410.313 281.594 cv410.001 283.258 li410.885 283.518 411.977 283.726 412.914 283.726 cv418.841 283.726 421.597 276.758 421.597 271.35 cv421.597 268.802 420.921 267.762 419.673 267.762 cvcp411.769 288.926 mo410.834 288.926 410.001 288.875 408.961 288.718 cv406.622 300.991 li400.122 300.991 li406.465 267.815 li406.465 267.71 li405.322 267.502 403.605 267.294 402.097 267.191 cv402.877 263.031 li406.206 262.615 410.261 262.458 413.693 262.562 cv413.277 264.59 412.706 266.722 411.353 270.726 cv411.458 270.779 li414.005 265.682 417.698 262.042 422.273 262.042 cv426.225 262.042 428.357 264.59 428.357 270.102 cv428.357 279.878 423.105 288.926 411.769 288.926 cvcp@444.945 266.983 mo441.565 266.983 439.433 270.102 438.497 273.483 cv444.477 273.275 447.597 272.027 447.597 269.27 cv447.597 267.815 446.609 266.983 444.945 266.983 cvcp437.769 277.903 mo437.717 278.474 437.613 279.359 437.613 279.93 cv437.613 282.894 438.757 283.779 442.345 283.779 cv444.841 283.779 447.493 283.207 449.885 282.218 cv449.885 287.315 li447.025 288.407 443.645 288.978 440.213 288.978 cv433.661 288.978 431.061 285.962 431.061 280.243 cv431.061 269.426 437.613 262.094 445.673 262.094 cv452.069 262.094 454.045 265.266 454.045 268.386 cv454.045 274.575 447.909 277.59 437.769 277.903 cvf444.945 266.983 mo441.565 266.983 439.433 270.102 438.497 273.483 cv444.477 273.275 447.597 272.027 447.597 269.27 cv447.597 267.815 446.609 266.983 444.945 266.983 cvcp437.769 277.903 mo437.717 278.474 437.613 279.359 437.613 279.93 cv437.613 282.894 438.757 283.779 442.345 283.779 cv444.841 283.779 447.493 283.207 449.885 282.218 cv449.885 287.315 li447.025 288.407 443.645 288.978 440.213 288.978 cv433.661 288.978 431.061 285.962 431.061 280.243 cv431.061 269.426 437.613 262.094 445.673 262.094 cv452.069 262.094 454.045 265.266 454.045 268.386 cv454.045 274.575 447.909 277.59 437.769 277.903 cvcp@475.625 268.594 mo471.101 266.878 466.681 274.575 465.121 282.842 cv464.081 288.458 li457.581 288.458 li461.533 267.815 li461.533 267.71 li460.389 267.502 458.672 267.294 457.165 267.191 cv457.945 263.031 li461.273 262.615 465.277 262.458 468.657 262.562 cv468.292 264.59 467.668 266.878 466.473 270.415 cv466.577 270.415 li469.333 264.903 472.193 261.107 477.029 262.146 cv475.625 268.594 lif475.625 268.594 mo471.101 266.878 466.681 274.575 465.121 282.842 cv464.081 288.458 li457.581 288.458 li461.533 267.815 li461.533 267.71 li460.389 267.502 458.672 267.294 457.165 267.191 cv457.945 263.031 li461.273 262.615 465.277 262.458 468.657 262.562 cv468.292 264.59 467.668 266.878 466.473 270.415 cv466.577 270.415 li469.333 264.903 472.193 261.107 477.029 262.146 cv475.625 268.594 licp@491.43 267.346 mo485.451 267.346 482.694 274.315 482.694 279.722 cv482.694 282.27 483.371 283.31 484.67 283.31 cv488.362 283.31 492.991 274.834 494.03 269.375 cv494.342 267.71 li493.51 267.502 492.575 267.346 491.43 267.346 cvcp497.827 283.363 mo498.97 283.571 500.686 283.779 502.142 283.882 cv501.362 288.042 li498.035 288.458 494.083 288.615 490.65 288.51 cv491.066 286.43 491.794 283.831 492.991 280.243 cv492.886 280.243 li490.806 284.039 487.218 289.031 482.07 289.031 cv478.119 289.031 475.986 286.483 475.986 280.97 cv475.986 271.195 481.238 262.146 492.575 262.146 cv495.694 262.146 498.814 262.354 501.726 262.926 cv497.827 283.363 lif491.43 267.346 mo485.451 267.346 482.694 274.315 482.694 279.722 cv482.694 282.27 483.371 283.31 484.67 283.31 cv488.362 283.31 492.991 274.834 494.03 269.375 cv494.342 267.71 li493.51 267.502 492.575 267.346 491.43 267.346 cvcp497.827 283.363 mo498.97 283.571 500.686 283.779 502.142 283.882 cv501.362 288.042 li498.035 288.458 494.083 288.615 490.65 288.51 cv491.066 286.43 491.794 283.831 492.991 280.243 cv492.886 280.243 li490.806 284.039 487.218 289.031 482.07 289.031 cv478.119 289.031 475.986 286.483 475.986 280.97 cv475.986 271.195 481.238 262.146 492.575 262.146 cv495.694 262.146 498.814 262.354 501.726 262.926 cv497.827 283.363 licp@522.734 267.762 mo516.65 267.762 li514.465 279.411 li513.893 282.531 514.309 283.363 516.442 283.363 cv517.742 283.363 518.729 283.207 519.666 282.999 cv519.042 288.302 li517.326 288.718 515.349 288.978 513.738 288.978 cv508.173 288.978 506.614 286.327 507.809 280.138 cv510.149 267.762 li505.729 267.762 li506.769 262.615 li511.137 262.615 li512.645 254.659 li519.406 253.306 li517.637 262.615 li523.773 262.615 li522.734 267.762 lif522.734 267.762 mo516.65 267.762 li514.465 279.411 li513.893 282.531 514.309 283.363 516.442 283.363 cv517.742 283.363 518.729 283.207 519.666 282.999 cv519.042 288.302 li517.326 288.718 515.349 288.978 513.738 288.978 cv508.173 288.978 506.614 286.327 507.809 280.138 cv510.149 267.762 li505.729 267.762 li506.769 262.615 li511.137 262.615 li512.645 254.659 li519.406 253.306 li517.637 262.615 li523.773 262.615 li522.734 267.762 licp@542.538 269.218 mo534.478 283.466 li534.998 283.571 535.57 283.623 536.297 283.571 cv540.822 282.947 543.629 277.487 543.629 272.338 cv543.629 271.039 543.265 269.947 542.538 269.218 cvcp537.858 267.502 mo533.698 267.918 530.578 272.754 530.578 278.319 cv530.578 279.619 530.837 280.659 531.41 281.386 cv539.314 267.502 li538.845 267.451 538.377 267.451 537.858 267.502 cvcp534.425 288.978 mo533.385 288.978 532.45 288.875 531.669 288.718 cv528.654 293.97 li525.118 292.254 li527.822 287.418 li525.377 285.911 524.286 283.258 524.286 279.722 cv524.286 269.583 530.681 262.094 539.834 262.094 cv540.666 262.094 541.446 262.146 542.173 262.25 cv545.242 256.894 li548.726 258.558 li545.969 263.447 li548.778 265.006 549.973 267.918 549.973 271.506 cv549.973 282.166 542.486 288.978 534.425 288.978 cvf542.538 269.218 mo534.478 283.466 li534.998 283.571 535.57 283.623 536.297 283.571 cv540.822 282.947 543.629 277.487 543.629 272.338 cv543.629 271.039 543.265 269.947 542.538 269.218 cvcp537.858 267.502 mo533.698 267.918 530.578 272.754 530.578 278.319 cv530.578 279.619 530.837 280.659 531.41 281.386 cv539.314 267.502 li538.845 267.451 538.377 267.451 537.858 267.502 cvcp534.425 288.978 mo533.385 288.978 532.45 288.875 531.669 288.718 cv528.654 293.97 li525.118 292.254 li527.822 287.418 li525.377 285.911 524.286 283.258 524.286 279.722 cv524.286 269.583 530.681 262.094 539.834 262.094 cv540.666 262.094 541.446 262.146 542.173 262.25 cv545.242 256.894 li548.726 258.558 li545.969 263.447 li548.778 265.006 549.973 267.918 549.973 271.506 cv549.973 282.166 542.486 288.978 534.425 288.978 cvcp@571.969 268.594 mo567.446 266.878 563.026 274.575 561.465 282.842 cv560.425 288.458 li553.925 288.458 li557.877 267.815 li557.877 267.71 li556.734 267.502 555.017 267.294 553.509 267.191 cv554.29 263.031 li557.618 262.615 561.622 262.458 565.002 262.562 cv564.637 264.59 564.013 266.878 562.818 270.415 cv562.921 270.415 li565.677 264.903 568.538 261.107 573.374 262.146 cv571.969 268.594 lif571.969 268.594 mo567.446 266.878 563.026 274.575 561.465 282.842 cv560.425 288.458 li553.925 288.458 li557.877 267.815 li557.877 267.71 li556.734 267.502 555.017 267.294 553.509 267.191 cv554.29 263.031 li557.618 262.615 561.622 262.458 565.002 262.562 cv564.637 264.59 564.013 266.878 562.818 270.415 cv562.921 270.415 li565.677 264.903 568.538 261.107 573.374 262.146 cv571.969 268.594 licp@581.485 278.682 mo575.869 278.682 li580.081 251.226 li587.725 251.226 li581.485 278.682 licp577.221 289.031 mo574.933 289.031 573.373 287.315 573.373 285.338 cv573.373 282.894 575.349 281.126 577.637 281.126 cv579.924 281.126 581.485 282.894 581.485 284.871 cv581.485 287.315 579.508 289.031 577.221 289.031 cvf581.485 278.682 mo575.869 278.682 li580.081 251.226 li587.725 251.226 li581.485 278.682 licp577.221 289.031 mo574.933 289.031 573.373 287.315 573.373 285.338 cv573.373 282.894 575.349 281.126 577.637 281.126 cv579.924 281.126 581.485 282.894 581.485 284.871 cv581.485 287.315 579.508 289.031 577.221 289.031 cvcp@%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (Atle Johnsen) (MacBox)%%Title: (Chess-folkets mobil Neg.eps)%%CreationDate: 25-05-04 13:04%AI9_DataStream%Gb!R&Bj:/NdP-"H!<3'6'P&oh!"R5IU4V<R1UAKn%"%I9I!C/<WTjU!6:(b5oBp\&qc`a*l#aM;X)%.'NmF%39`'fE^RZAB-gD0L%S=?3?\%kURSeYKo?`nJ)*#naY&WU='lkn[a?@q$C7$_Kr?K!+QccbfaH;L7-Rf,fd1oN@Rj4'_`(lb<YX(iRlX6rTdgE$4HSa9DC%h_&9qS:Ak.]$9SLe>l@"@YDTVp78j=2hlONDXq_Bq7L)':)hFZ]\I=npYbQY+,KCHhkfIG!jKOP1r,6bWa+gtJ6)?(s7s+VmYiNg%jp8Q5#*cC9c/,[/SM\Gd)-M!$$pFL&g&h=T&Aa0-KG#^?!9W+#`(+?-(>TTGJQKEt88/"'e,2-W^Y\3N#3/KjBn];f=aX[8.<YUp%<_:ak)j,B%F\<^L4M./-S"mTEB*'UCYXql%^)Ahs?%?oY6FL+;<E%rhXo9FA-lpI\;7ei>boCi'PKogCF\@tqk^(t+=8uup'U7PZ%2oB7B4LcamLH,?+`dO.t()BM4.+q<N1@(edMK@701*=KNJ#k[i:$/@=iGgOkC,UhQgJWQ]\f#YESUNE>E0QigPoVt+FW/s<MMtb;%rZ]OB8@ni^fma@IYkZ>9fiL'pdr2#d4iBGoL+`kfg]nb]%bf(3q7k#bQu4ra+=4e[Y6WDn[L$>\?'?YaH_ENT7q\U5FElY\%:&m#%@o-sP$TRCLJ('1&I(GN:l1i_5*XoU\pL4C#OYR8-*)6(==3^hpXiK#tg1]hP[G1)U8(HR2Vf"E*an,<j<q!2]&@Q<&eA`UqkPnob%AuSO%Ba3\YU\WgpDlfPhT3cB]m>QDG^q(<Khf]\7)qAg!)rp`Jb"iJNI-4kC`mo^<Rk9_X\ud9\RJssih8)pC`d(4bhf(eZ7mj=c%&\;#@hZ0aBVO^:WgZUqALdKs(qQ(13H)[^Y+i$6erWn9\1X=]-aN>0\LQd5!+P.,Wqh'CmaU`S0nBrDoJe,&c]r!mP3\5D==uU(i%.JJg;-M>)YRLFTA#C]pn5JEfThep_fjaMZTg^RqF]I!Lt)m7(F'd.M:>jasE48dtio/!aSVqoIqj6:Jf1JrPa(`:s.(kN[AV1ogk%lkZU,&>W#%7%rbK;L8\tfX944W4NDYq'<;Of%IYt%&ZVMdMbZ39o+J"PXc'Ri\:Cng'e'$)D).p@@\k2FELK(q;)Wp^L9(k=/V(I%Z9%hPq>GQ'^BUN-Ie\++C1!WhdKHi;pA_&Bm6cX_rm_5l#lp+_hT_\mX4j,E*G"p'3R#&'Gk00WI<q7tNN-S%oU:tY!s&?a!;'k'%r2VmD<,5dH\AnOX5l=uEiI;LK0s+7MZdWcMRXMT)JS]HL5p)+J[HRep%?X/Sjg@Ls<Kq7>'*$,olZc!Z&E>kG@/BWoj7iCl4;md#%(7fS%1]P)A0O)HcG)usVIlU^Sd,Fc7F`FpGO:uZiO:#C_5d&]A+a1AqFbi+Ps7`3Z^PZT3kRQn8c%c2n^dtcJ_Z.T_c(P)0.Tf%R%r&6Ei6R47dIGF\ns"t6FmWRmq^JKDj+f3"s<,[quf72nN$oDl1i]LaqGh]<Cs*I;m9ZI$@]:+$#n\8iss-TqNZe9&Bg)Hn?,=NIF%^MH1lfU#\4mnRB`BtGdUU*HbXrO;0X$N0IpC4cg0L\YOtU-p>F(C5tj*";gn<joYkrt8<>Rd'k4RWa&CAkTr*_@P9cWOPTke$OHC%`?:jkGJ;dL:TNl[].b'sLBc0Q0,-n#EHCcUVRtX]cbuAgF=,OAVq[W<,#.!@QCgqq];q\uD,;61giY`7E7=7&bcJ/<fcE"`la?+a%Ro9O;E/\>`Q-fT9mAU3'[Vp"SKeIXS,[Gd])--Ro@28LDrXV]SBt23Ss(TcfBngfa4ff-_,C%k1G,r.CW[a[?RD?a92q,lf3cX%X%a-5Yao09%G><Bf$_;c?g\S@-hD;Lp$p4#P)mLJlh:7AEX-Lm0uG5go^5sGA-g)+3ug&:`Hg#u+V\d;_dS8UlglH'L.Jrns0Xn-uM%/28@c^q>PLEJF;/YS/`V>O?URL8J:"r2l\rQsjf5D.l[9inU)l:'Pe+c1[dX0c9"ibs<D5Ic5c6lOtD/>.%T%f9c5Xi>'.1\'o9,%-bsNCHB'AJ_=ro_BoC:0DJ'5#M4pF=!'dgkD)Q;@B3[[r=*$4:nEALEm>I^JeEl=t'A18$TO.$FArXoR1GM&]$b0u4cI;W]qT!0+%T&HcW8$FrF_5Pat/-Frs]H0btH*!.cTdE;@7ubnUU;V\CG5P7IC;3!#b`Sldbu1GW@`KD7&W0`Z3:5=7\pshcKJX\=PlBeE$mV5+%2&dPs%#0b@9o$"0#kc$.>VpOf>$Tllcj-#/."o9S0"%Us/4A'Wo`WCN.-"FPU?BVM;rl1b0(?43c4?1g?bPdP$09fL5Fn0#G5\L#%R\T$1n[^Q_H?HO!'B!ap,!daVoM?$VopW^u?bb7u:%GL<K@N$(K8V5,#^GrJc*$^^Xo9S$T%:n3(5?*5h;P:iQjYH$.T<qO^jK&)%%9%AXHf'rlFn@g<Zs"'\IWjLpUq&u*H;=`4a*kR-_Trg%d2D"4ZXJO@6$F@!%XQHpG0kF6lK,_"^;OQ^<Ca*G)uGVZ_oV+R2-FD?%+]u1DIVW=Mo16>'o.FPsC7bdL>;!G5CnY%`q2sgVQur<Ge0^_XG:?S"$m8D9X\O'TMdaX\St4U-=jS7&^$;@^A-++Wbeu<t+RCne%fDDV9;<]n'f)O,89$;HX\lHAeaM/_gqclF1fP<0Ucc0/A7ifWD^gi_i@,+mZACq:`Hh]T<rJrG]7&tch;$XG^C^06d,'/[CL'_h"%qp'<FE%kG22V:qAG33lNZtNqj@#nK(d]3k;.ak=U=[dJ7]]>aO?o<Yaqpj3Sl`,u)k.&n.gS&sR*(>ZZ[Ye7mdjGF+EH@C],i/Ie%XIDD"[ULpbM"hXbKiNmKF\sMi&5?^Lo]ffcjFTj_=E?bdn#XtC2T*g_JPA@'&(%\"DD`=$,B8ZB2][KDV&aYl-lFA445!j7j%3>>%2&nNUV':(]B:S_&*Y>n*=*DiK$^UW5h)@h3n\pdB/,a*UJhB:0C^*_Lh'R-*2#fTpO8iUr;.A,0Xa+A6Y*B`7iagSr%A/]s'HE+%%382H"_:Wi,h&1g?m!mb]2`(_he_?te],9$O$Vn/l/Z]&F151ng`o%.V"CoqFH$%._aV'g)8AK%Q3(A>^CfG8EEZf9L!?*I9AH%T%%KK-VGJdY/Ni.;<I)D!:PSs!ZWP#Xb5l'B1_6:q\5h!.65:;T(P_MX]jXUg!U#?pW5h<C-u"`!,or[h!;Q3t*g]7j063F.Gkfe_5'%[d..ZMA)i9q74GA@GD(LnbIba6J*5!#9J*;QP]<q2GdosnXnm3T0'a^3"[67WY'#9I=:ZBFq-EVp*2fXc[(2hPbB[RH=&b0R-oW'%gm5;.G]`^1$Vs+XalPSkIq/dp0UOLO:6_W"r^=NP*inb"r:CVg&"28$kbQosle[-AOrmcE6mC-Y?Xp#+]p.Aj9Jbp4mcB]B'g+Jt%qRA9G/I#!8-S,;:j`:FE)LrgZ&u":W7Jp%)T1HMfLIcUX`8/%QRF01kQ%$kVb1YgnESV%pP@<B_#SZ:9.E6`4OcE,qG7!g$]cpF1%F<S7tI-dm)eJ!;oehB?:aqp8@f&lNPXd>*"$&ip[9h0(bO%(?Hh4YZoB,JD@06riN1f^Jd"-^E5-M2V4QkVm2N]PJ++?g^_`asZZ%FAC6BYGd2W=RnB#FSWpSG&kpA%DMRi@e1_`HW#D6m\gsS#ENeWcd=7#5)QRiR0fITH1na&1VNp(m\S"`=?>K<T@atX$j<NK?7!9E%l-&;`lD7#u"WCU8(>]e`puqNX`,sEdmrdK-;PA/WjtiLVjVs2>4T<`qp5R;I3gL-F$b+#A&'Q@@mt\'_(6e<]rp"qY6RHsOQIa1^%?@k[@]4a7i:A0\%]c2.dAs6-GjCR+_;O7ok'm@:h;;g(H_-H)]b-nHGk*)B^NqV[ppTj%ZB/uh_-:Qcu7POFU;Z7f&dKbV4AoUlo%7PE5S4AHf!hG\oXII>MaQo#f2-A>S:;T_p0FfgArID_jChg6GK:&7&"rTok&-B2(11$bZA5/X`W.@kqC>"tIWZMrL7q4pNPfCA9A%o@>TE8/Ppl@Oc?fj6bsQ-4Ru+d1_F0q9O]BVtc8IUg0`_AS(-FBZt:p45%(+^$RO5As6-Gf@R+CUr';']76)$9FA,MVQEa/ToXQl%8^F?RIa]rN9[PrT%@sM_<l0:fH;C`Titn'!X*!Lc41h`JV^!ZEL2!1MBPGn"F!07=_[K42KoIV-5<i-WPEK(u[>Nk$m$lP$C$P!A%<ApKAr$NE_)I;6h:0NPBZbVjgCDD"GRjFB+R.NC4Q/2U)k*'-6Rb,k]!P^OlbGUj'I_XdKS@%okr2<amH:H^t%Zeg]c*KU#mk,PD%3]::0rU=::EmjjZZ^ls'Uc6f@l"+%f'\9"Jp?Eppr`4Dp24aC4k53qSd]X#8aBD:6!n*6X*I#E`CVB]cp24Dt24aC<4P[E9FQ=qU%4kc^1`Upfh7qF`p$e%\DlgTo^rYj(tUhmuj1t-[=?(J@B"q42cncbWUeH7QYZ[^u\/Zps,I2kWg39c9.;Af,nB.!8)6fY!&_;;FX%l/XZ,qm*_4cV*pkTM1fUd-$=]0Jj^*STo,%pp*RS&'n:&6lRHVN5]g!Jhl^BI2Or!_U+CV<\t9ONM\<E-hWKheQO%B9c@(o8i-c/%l:h>>)-&]s'id-9Bs\^3+F%PGr$X'V[97no(.$+!mC`t'Al"7Qk&Ze3h7L.Bqif0Npnj?Q61h&K/=s]glig<O<E`;FYGPuX/kGX3%%.<YpA:3,2gj-8S.Mg=)0A=mOh3XL]gCMK:V9eG]^?*fHZhIEXH`GdRq-a5eZ$\W?]4o58TAJqaCH7<N;Jn.3F>oe"XL8'Q)rA::%G%TlNMr':/T@PVeIESP_l/;;,Hb+m8#@HlFA,5i990.B8q=MT!-@3q.WYkW%'S\Wk\%hC"AC9s^mlPmeB(Zj7<K-HhN%I9/@(;Cj%bGY#^Xd$;@]'%a.IlXaQfNonE<GPdPIDMHAcrNpU*l].T>%3H:;46HsfrChHR";/fjl6&7I@?$5)4m-Yc41K`Vd/F$"\MX3k#1/j%'\J_8iS/.JrE4SFG+4?K'055Eb'NQXhXYADC>nlG+63*t]2GA.p,rs!Ppfus\4h&;ljG-Fj(kb+r6"<gBqNJW-nT_IM(nN@>fLGQ%."2!N$/N@]4JDL=g#IPl9^uHn+MmN2-[ba800=lQG,!'D,_.oj"RgI%/U0^pKqA&?j-f_.Y>Y(BnktIfL@e7;,.PhBQF>C<%+9&Z%VRuC/Z[Z4>8N./85/MO-c90FWB\q(3oL*Uj?JUh;4,Ki+/%5Dl%BFbm^U8MCT4Q=NhiVPZ4//tFF=lF/M78%;#:"QlD!]tD5Mo2u%Wp3tD_Cd>2\q:UhcYJ[:XP[nKRqc5"LK>9d&Ukef-H)f7X8'a::l_Y&KheR$dnQ&?r@E*-EsE'*@/'i:AY.9`YHUsaXtifGT@RH6%\/#XIKR?PfS&N(g>QL`8K:faU8sn]l$2@;g];rb8?i&:ZE')`f6m#F5"HU]3*Yf+ARI19'Sc1;FN^ueP]ZRi2nBS[u'B%/n]2(JW%h[2Ip[m2L1\?"Df"qG<?g"Pc8HRI`_13_D3ma?qikh?II'J"s0h.UJ1K&DcR`hGLjk^EF^h(#=*"I[0(*GI%#6[*WSRrgJu;j;o+%_<,*pQ<;0H:)]'$-5i=q8C0[Xe+dS@PC$C*"\d1)@6.=?P_E7BYs$@]/'US\D'm:Ve)u^#Y`uHBXr&\G'JQu:bb*bO^VC0UQHoTs%d!%Bj)D.(gf6J.li5nQ&+.t2++H-o<lB@pV0igY!MZH:YV/9QuEOU:R<WTUl.!7\JCdu!!<!U+>rrc+)HNTW=Q'j>rdq@s(hF:['%RfThUiFat6;uQhZG_!U;K'I3hI.Jp5b=H-)+hP7CZnA@DQJp<kKel4`IL8rCC0^i.B.`$I=0;\0`obL\1BHpZ&ia-S$JsDAG_ABi%<N79M863p)C?*Q^hf?R&f<)>`-$Ee(>]?k:X-`-UB/fO.2C'#;-84c+=eUU=gdXce<MYXo6-Ru.ksR_I.tHfik9GI2qkqq(!cgIH%W]62i"T^YKVdWrJ6+V9M^CH'<5T_8dZ4nn^?ZA"'KGN@7Iic3M;[qAZT5XE>GG$]:#oP:a5X[h+iu2`4/F4(%/n`s_p@@eo"DZMt%MF+\6T75$-)?Q>fPC.q$b68T_Kg6<.G&&GPk$2$q%?4JeL2X'9,[(DG3R][VC1MCUS6bRAbdXI]T6[u8)"rh/*m+Z(?4l_qnlZ=p%Kb<c:%RsFtW]m9l5rm-EJ'5(QfO]M?YBKY7pSqAPm&BkkK!Ed<nS1-&9*ZL*jIT#0LZYo$/VAV+#D7J2+!d0`JVlDjap'-\=Y"),%RHR7)4Ag8E%>)Wh#sgt1_Cl]U^e7+f=(5uA1I^rk97iKd0O6jUr[k7V88?A3b.$P?Z7i*QRl*"'9K$4`Xe*XjlG;2kGV5UDii,.`%l%kRG9'/`(Q]\LW753&uNn?#i^@P"[VV_HTFVI^/\RJTL&c$!h-FBVegQSu>dYHQ/;L*3\lE'pSeY)-e9040)]aJPprFBLWl>EE>%,ZRp7l(ljAm)"R>j4-39j]`iqHTUOtR]LG:\U5ntS8Q@[S85BJg#Hbaj4]((#A-qnS^0"$IpnS`#0lSS]i`pRceWI,MsT9n^;u>I%Rs"En)C`8IcD3`RPTWs`]?VrQD<"<r>$\k-AsX/SV/H%\rP3Gp5ULEdLA+>5AgJp45'o1-d8fXamPh($fJ%hLB,9hpW2ttUMqM:e%CHL[&"uSC7pBc!i-]X]iB4bsT1Lk989Jc'1N=@61ph;QGc&go43?@7o5<3lI9s/#$"3+(VM%=7EF&$eJIuCSScJE^uFu"4fHKO)6%ZA#I60L-+\V>aYiUErHHqoIo;"+jJiXp'u/_J9XG,Iue6V"]urhI#oZXc2OgcGZYf&KdKhfVR6[dF7K!fHYl4I.Kanf5WC1q@n"g%o]>11EctPP-N-!')Z/%n6&*SGg^,@]671dk3pt`.!12"7-TMR)I%@IO=#8c>`\c!ZGS;%&A1bLXnhI<]T48KfF0c>!?$<NE`0;fs%@hRR@$Co;]DI<skh7=1@]m$e*P>D/AM4&nHSG5:9q:Y'pHI5(%T<A`ukq+3ZjLfpINEED#%O**Y"OV[N5U,.KnRU2HGd)A.:[*c`%GK+%sbr!jq@0iTE(k#i+;88Ia(!&-,+IWE#L(PY"h5lUF[/7;eh7HcRKP#e?`?<mS(mBHJAU`;X?IcZ,&41Fu"cE7Q#YdJD;1PqZ%U90D&h>e1%0aBPM&1^nVG]4TA"D;#@9F!H:j@4?LGT&/-X:>gqOj5`m,Du3bH_A11[C/Xsac!M^]JRR:/D.h%b=oDY7XUaR0:ad8%rj>q1Ybu\B^L==][PSMk#PNrfYejLM>8T0D_j_52l(*l@52k<c!!#QlrLZSQO;:S(D1OH_Ro>CWr]UCkUi%cZZ0(cP_Z"i):95uq%b<4p(ip%cam)BGL\gGH=99uZkahc_7Tgra%a(GUGItPY/'Yqs2m3?[4k#CLf@37P=/f+D-;dG56*]lAcZf,4Y)gcm<^2g[ZG%_9Y%m3D*qpl<_@;Dc_aqA(;$Yenpam$*3D'*F]`p1kQS/00\=:k[#kp*CqE4f'rpVkYu1Z]DSf'k^T\V7okskOLW0Fh%>1h]+T"IH1PK%f+FE7)j-!;!Pd9Y(#"X\'%B0n1SED^0&ND2P6-RPFiY=.dRPAILm(/9no&e`r,!\:k*56)A-<%Nq?@J5`PU\%(i<"R*D34kjHj`Y%.L8pk3PMIF&hE>"&1Nu^'3]m6o8',l0U<rI)sN^d!HD2L6t=&E=eh#cOA*a7K4A,rM.j4Yj]OQ$FuabP&;uhZa/G<*2b`3/[8&h^%nDJ]$eui/pP6()gq_+$)>Kn>l#Ru=iZRc/jS<J5D0a:H+dH:#%,'V]-XZ/&6?[t2'j+nYWcTHbk<aWClm(537*c=Y])s,qEX(>2F%N?_Vs2Z2^=!C^+PW+D=A/<^s)9AUgeS>^"^e%:V'+i6r8P;(;4o#o?_C>!/3M*Mog?`Ra,_E;X+/H\OP1UV%=B!Ig#W]O;JA^=LK%876l#;Tg^X-t0Or7jQ0]<6L^>Z`[IibNH0/bG^P93I]9'o)!*S>)rHM91pXI)1[(BF4QhE]0fLMam*:,n^/VgIq?'_`nR>WV+c=[%D-cTpDHH;AO4M\T<q33/m2!.qM.>D('Am+TSlMj&2q^A+18c-?!C,[nhk'S5A@e3urKuYU,se8S0&Q6Ar*s<M;*W9'dc,]k"M87q%.@Lf;d:72Pi[C'k:DV'mn"%ujWLf&.%P%UR:4p^#YTdK!ib00;S/;e9m0sq3&Z+uG`OSH]6FsS0_7X*BBtl,d$#t0&CL4'+1QV1^%o7$9#h)<?YS=!'U\>].%[ADOja_9ihoU%%\*X@PVIdJm.Q3K9@GadN`A\9UQ)7McfIdu7U_s6KF-_+T%4Q-Z.UD?U3a;%M7o;dh"%7BeA%V:I(nDiH\H*$n57]iM$0E*C;iA?[8aP-1*Go%Cf,LZ)8%IQ%-FhSC[V::6=N!p`1U>f[&gm%1(gL#]AjH);@;0,NALTAF=0%[A%$eOBST0[I.1V(*)rc9g9h1Z[OOaEmH0$AEKHLS*>aPr>LI:f!:M<E]EZPFgMps+H(G#i`TC7os:Z_*K?i1Z0iYGlU"qGnM<DE%T>7IgpLqTc=icM6(:l)k,7_Ks*lWH7[_N3]]0F1)76>e(XttNM<hnKW.3M]1#,AJVEnLJ<Hhlf:_nHDfB`JXU=4@$>lf+ZAgejL*%k;*>^lgcVAr`b"Vgpf'7i:p,=@ufl[Yo5^4etapjDZ+h;cmFrsJV#YV)Ht3H`hQ[D<J<_!9+q*=;Z*ILH,QuV1;ST4,]Q2D5![kE%a'`AY30)*U8%/E2jpkKtn7GEo@BX=/L6:&g3h+@P",CHP9D+7%^7Xg=;1Dtg>rB2-:2p?*Q'YJ&>Jd[oTo(.8-t/DK[XOFUT/L]!%d`0H+2-d<$^>ldEB/R?F2W8tXZ?X5jfGcfn&I5#mXCO?$7_Y]4icA:kZ=jeQ=+-PXB\OYkjBJdeqKA*bCkk9G77H1`C#CW]`/n*0%U;CdO!mMuo-.KDeBGoo$:^<Sl1Po-=R0r*L,OfW>o`I$C-(!/-4,g\7`3S(aB3m&GI]fF_AL2/]MRNo3ej#?Qca:`F'W7'6gIc-e%i@URW,"N2>hOOXXQR-&\'sbiHoa/QOJ(T^,Q//)&DiGW:nSe+[ghW'?;I^]CLH@[hWNeOFEtfXZDIlCEc]%2>qd<,BL%[7`C=[)f%]ZXjM[M:o4DoXFZGT(3u"jcJ&&a)$L[RD)!;!MbHUI%OBAu2K_At%=qk4#f#a/,;dD9G@3Yc]Q9/RVhFa\LWLKmd+T5/5qjqb)Ij%h%s]NlWX2FlmABJWg/Ra<Z!"Uc/hW$X__@djB@TR*?)+N<6fEO2e*b=G60ciV/!mj12Tf/f0uN:e$Q\5EG`aDEq3_;#.;$DUE\LK%0qXsQeY!Y:btWP+3b[^-E]N9+W\!OdcCoar.FuHCoCcV7RPTnj\Bc*Uc]_;&Rbnrl,ZB%?(iq$M1jdH((rjX^bBeJgk@b=Qg-2eg%:s0)qN^2#]'^%_AOt.#-dX8LR]YEZ=>9$K!+k'?3N-Tfpi*kAGF#.W8?ZYg"DB"cV>X!K^HpnXS_ejES/<g#eHC\gPB/k2:3a\Fm%\uti8j.Vn$oNjMhqCUiPijZX1_)eI#U.0JMiF8-hNCD$[7"@tD)au*GY8.]80@sTcR,/<`U)-mq/3D3kY%8AUJNt.i[mZmg"ab,f%S[g'K(MjVK:T_p<0?.$fpr0F(BT&/Ko];85YutA9KDW^?ibfU\5(r'=?Cg>?d`*dI2QD3-N7jG+3Nn*ZSp+UEG3l^GA+^:d=:)[#%_Ch/cJbjd)WX=nX#]5RU:A"F-0jVL#@7@?R4PSF>:[?F)&.qQ%*S0d@MVhcYR*;YXLmSq)dS@*3*++D=H7/,6h0$'TIA2J=>g'/Z%euRoCgb=fB$tDKUn>jH!kkS3a\eEp0bHmc/R`eiZp+K@3<IZ*AEfpRj0Eq*sr5<?p9KLY@j[.;A6H?^2X7)(KnXVBees&X_7b:,=%"<cK8*F%cCX=VO_9>Ab&?E+^rb&+qM[eSA:mb=G[l.M?F;>Kd$l\Q<kS.lo(^8KVldX0*XhO)=6\f&=q?g*Cm3\U(^e`P"*bD!Z;%9u#eV&ZE_+Z'.44:!q5Y^?#e,?VT8_PAQAM'WZ-^,NHGn>T;(rIN?EiFF8"fjbROAlQ\2iB7@HAQDcFTYftb:;>LQu8_k!K9YtUH%BC,77B?)AE=RDQLDJ8NA<!k:N[;8t#bAQLo-;qLh']1an[!,E^CjuVQjn_ruYE^cqQ7=ksoT!aK`[hU[%EHK";]bfuIB<:RX2?bg%,sX%o>@I[-b/oLZ_(dB8[>R&Tei<1ZWsgrB2.Ja/[FY'`*7]Q*s"N3O,"Pl!mOVl\39$INE&jZ&dCjLu[6BIU>J,>JE9cuHX`%Ef%6Re;W9@:Y:C!?S"#gPRN1*4-VpQB@Cng(a1/nhHr\#G\0;06\]XJV]s#ASNj`T^2N=*NLAk03)?nu>=@mAOS])o%rUe4B-#$FO][%H.&jCGsf!P'HnX]b?IlfeX``mh)n8jAZ(jAhd<SX'@=1r>':l_/?I"W,)**Ke?Va976+8hn"]RA50_]b=:;cJ[\?p\kE8MnSi%m&%/TS#gUOI*]H64:-p,^b$%W;6bRdW-!4rnn-mj%!e]G>X^C93KGpH,MTFBnRNIsb&HoDTYrXp\+Ag=Qu0>OX2JP]_m]5:63YR+gCW%]OiWB(4KIm=.hVmZ+dHXJh1YHVdW$7\'J'_IJ[8dlo;*1jLTqB6sPB=SWtb0IG]bO-Ehc%JHOa6lMp6o"fgE\e<VF#:4sg\\/iMg%af]mA3snmM2\WWeJ#I\hPLTS9YD<qB-*3KZ]6p3S'Ri">;"[+7+`-qIC;X\a?+rQ!:po7<eO8tHs$P=kIP0NMI&PcgRHi=<g%[qb%Q>>1=LT1fUWQ(DUrnp/oAmbDkreIK_^q"iBntG@,ib,9"/V!;aC'/E##.sgE<?",#4fa"cnqX4ST;fg][6OF_[:)u23qaYCW#B*k%IAV<3<S6_pWY`((4p&LD%oog&3G_V`C%7m3PESD*Ab4(U<EfK:oTG_nW7kqdq:JgZmq*ZA2N5+m=/W1DjlAeZCXqo8qbX[`W@2P%%r1RlG--M4=WOC*]F@pqX+0)cq\,>WKW_F%<q5*O;PK-`L&F\t+FBPJ>"rWeVA&k[fc7oBe676rc"PC5tX3.cXI*,qrT'[Y<\+E,R%/`*+t'k]W,3eL^Ml0@9pF^hQjjk6,2Ccb_\)N(kNF"42UB5\sZ`^+mY"-CU<r2r0:6#j=J`\n6/=VPMp^*p\>b8$>$ZRrn%ZqbnT%iuH$FQ"N17W*,__3%rU$:n4Y-ji6E8%]#WV>+Cpl48s!jYKF1G2UPWsD/I1l0qrOPU6ud$ZTMG^[8t9"/,$qrH1i0Rnr*'T;_0Pm%2/Hi2CouSPn*2_[ci3kZfU\7>4"rS"Y;0s"T'`11>CW+2gIc\Uip=p-2.%cXG(<2cr8]`XZQ0`mYC.n3>b:>UeCZ=UDp@ih#K>@S%pVJp>cZW-T]pNrK;0hlT(gF=ud^D-iNaEcj*BVWr/r)]o=aauaBqB1RH$T*=81&WB^FmiU=BY[Inne3_CjiHDY-ht;*-AhkZ^Z1$%hp+-lUKdckD!/4kX1k.lk^2<LbJpXePG-"=.<oWW452C:IQQH4ehj].f<[EmNJ2:`42+;T=5V:]ZX?kb;*-OIQBl=^D=gV:(V/06%U6@'AipUdsf3@^ufqrt93_#bu6cSr8$D0tVEK74U!HUdJkJ-r,MK+QD>.7`kmN;kGKo5E^>1(*`(q7N;2CleVE5SB%MK,OQ*<**M%>b?*1G89.5^1d$5MK+tW_U3NV`g8K;rh<kL?=@JMCqQm-ENN,@FNA-b</bbl%D29_``HYd>8?1cT=fI:PgbM0j4WbU</d;Ieo/62%h"b4Y^Sr&WX@iAjMXa]WUYDgd?gI-rN@W"#^Qu:XMXg)`-.u:WY>LYYMi.&$*;Dat(uGCS3N*d=3S2![W#/m7Ys59+?g!pORobPQ%I'\:F($"@E:r_balD><V0&Q4YcaR79^82_uRu22+,s*bS>J"?LM=k#>4PQkQ=0)dQ>A1>k9j>C#Fd%]&o@V$j/&o%gA'8N<bBFK"%=dld2`OK\8f4EEgET<TqIoA(>I8fGi/&pc&:]$1@?e_5_r&8iU33O0C3V_P*mu<=[=3DVK[/?Y-h!2L6gT;<"9k2?]j6P9?0AI%J%qU()c<K,rs\BXT@[p(SiHmA=Y\Qc*b`f1VnD^rb4p5t._</f-L%)(]nX/$\6N,Nr"e=%-4.j?6CX;D1XHsSW.-PbZ0/R*]*A=F=o%g)!$*pf?n<(#od!7^c,JDW2u@6,bh:IEQZjD,lP\Wh,acX>d'phs?*8FXtJ`o#*Ji(cSuMiX[NY8]B'T2SY6Y&G8sP`a(e":Y]lt%@N<rSY8RAPMK.+/Of_]DCF:?e_hoC4N0Cn<b>6o3X($J%ql,DHG89-rRJ'jb(glV.Z&L9R/aa]b>qs'PV\Ks,=<!:Xi;TeBE32#<%GlQ*i_mOrLZ+m:KfD<%*IodZ)H7dmO%bLQfI",3<Xqf\DJ*D<,e_s\K\5kJkrT\>2\:q+?Dn.pa=_7PMX2>C3om]p]DHg8YQ0N=j%9H.gI5H>:GC;X]\jY*XO<L(pJ:B=sT<ZS=\L8pU4-e70V3Uke*%QE#oIoIG+N%+^"Fnk[EPddYRI"QaM%B@<II_Bi=e_s\Kp]`al%NiU(*jdLWU@nYA2-5kWh:`XGBdCo5<E:"LsVU"1&e_t+HdakG9B=KauZhT1<E"*[;>C,#93ddo]pJ7g,S`Pq2[Q7Zc7IYNOiQG6I%Io.6#.S"K*e_t[!]\BCqf4r3?Z>G(k*H$S9m8f!X[Gak9LGu=F\&]WGEcnmhld]a15H,.E&8epY@B7r;=u)8apNP0HQ>>/gFgtHk%DPXOS<ejo60\`Z=2q)6jY7=pE03bLff4r44].[3Wmf(2>XRYQC'cu89X2D?i2R3(e<ZS>[2P,d*<HYfW($Bb?_\[^*5H>9<FKYbr%b&]3d;5oHmW!h4L,O5sf>eX?u7'C>'!T2tug\Mul4h'MNG&CN<]FJl1d'UKcKa6r@G4Ysr&*=<G=.R2QD*pq;`uj?DfP?am/n&S@%;GJa$3PFmu*b3APs/p?Sf>>re?21fm+t&69Nma'V^R&geXK;$i/Fg)Z&a=oAC&i"$>MQ:i]#Y]?S^r-KYk`:89=[-odKQ,t`)F.R%oM>GMOd2bmDXc,)r>"J=;AkpWjEFYl]2?r&ng8;UDojI-:!aKlo<%Oo(>GMB\Rj--FWRXWDX=RG1cA[gq.<]+Y,\Q^8I>:M-c"mP%dH0-&bmC"8l0XB7[.k."$3[M&gpTVDV%&'rlZUBYNY.)R@.Ch!5G@)^6pmDRN/lXCC>W-s4EOKSi%,)e].i"<%C-$g[f4glMsYu@%!2ROG@rGEEXQ=g/(1Xcpr,WX_`9QS=I3\E:A:4D@Dk)>gP3Qn-;l^!_fuBEq;tcGZ*ifu,/7/A<k>CEid=l$gp9ZqR>==g4QQ'O^%S&\pie%;:C#+/,n.9`74MV@1A3E>OqU,AEWE9$TPq?c#E(cr4D"_4-,^"=tOW@o8;OZE<u-N`t1ghtpchkaIl@m`?r:5r;Ho%4iU%=M!oG*RM3CJ];Xt_?-%CRP=0L2brDDOQ.N,Qd;h3fU:#jX`5/kO.?*')T+.r?PJ'flSItZSa^OhV;:FKP7&F:%SO&I.:,X[f=o+\%FmIel/OHF??Y&+iDq,t1l_3^nfXfeg9_W<$$Q653R)[]J*\[1`-<nD#1!nsZN8%[dBtIa;>@*)lr\6;tGbBme>ME%7U/dTd)0+cG%3\I%W&P[%>%hefF<>!HGBnU$gZVXJ^%b-uk$#]h!=XV.#)7X%VZN($ao^3Se[AaCf_XcN8)jQK?%p%;Z0'p;h.JCT4mZSfc9W2G_%[Ad8W4U[ST<ki%m\p\Fq;]:QG,tJl*8?4KW/A>8*+ubL4&-mo0o7M$,P@sW3!$2Y%P==`[9?N)iBGPYC?-E1M=(SM8.!GCQ>0!OQ%i;RWeN]Vo6^&&kP^Q3cWepU]%$aF?p[D0GO_(%mqeDmn8deP6;#IEl#@bplMQY)X/bNp9=ZOj+RO(%%(<lZ:o1q(Dh&_3GY;_,9R%TW)KAC$AGG^\k06bA6=.lHZ/gW2>td[^_(qG2Fb+3Dmtqm^9KWQj]Y5;CsQj^?rtQ*F&@Yl^>oVLTROe/ADCs]S0QHQ)aMBC3_BL%]<]-._*T`WqI]^"eFHL*&W^3bQ>.:F]Q<)$):Ytb=s!(]ZK')-btE@)fc!mah`SBO?Y?gLpYSJFf)&=ZdgIIL$R^c]b3Sr>]P;H6%'7X73&>G1uM*"'A`'Mq[]pcn9FaMth;Sd5`om?G7MYbkF+!FbRM*$Xl[8ISU*tdNe(0<,i.V\mh]5V15"4uYm:4p]m_hq+].%96C%r?A=F1!R2_q"A,o]'`fJ48[h/Tk!\?<m,!H[S0VX2Rm^7OnUA$ir&+ePFBq:I*4VgYuY)4j0m5*@-TLJI2?A?HbG=Y>0c<h`8#CI%q2IFM`"DO,05#$Toj4A"%hB;#GC!iI!G&3@[jb/DU[O\=m(qQ'9XrRcHg0*85US0+T(;K$"trQK]N;Ybf_si6l`PA2C:.$2jDU2e%a[;u/+,\>0;<B/+l[/,6"%=OKs%0s#Yqeaf#Ni.dodl,*Lr[ZW.Fq#PUp+KMRX%FfGSZ^JOKM*SND09q;](L]EPceD*Yf4'^??X8%E5a2L+ZTH`59*@t0&M,\.EMgmcebQ?chSjE8Ru`MG:IMte6@7O:&D[%V>Pf6Eu5Zbq4Dm$]9.$P^H\kc0:O7j^4+3&gm@6`AZPH+%lu_^A%^2c(mq2\$qg0e0po<gj2n_O3eoLS@_5I'=j=C'#7jHUNfblUOLH`lX)%/Rglh<\*Gi_0cnb2NNk2Z.p5oh!5N(0_mK'2(b%m)m3kDn<beSVpELlL]bPQ63E^g$[de3kMs%*0!"WiR.;h"Jk.(5BL1hY^&6t..+J;8I7DYmj/V_o6Xi-Gac3;G/[pP'Q:l]b@Q3t%fa+$O\6tK_T^8JtB6rZ+T[T/h_(Jg-kuj!fUJ,gF(dAAj32N9r5P]A9NoMb:Ps4ZL5GNI1\9@[1&(d.6)\c"2,2Rr8hdaJQ`O\WJ%TlbI_s%tgAk2a3+!EPKX,g(nM;_4"`#EKD5%g\[BO1i8MdhdK5.JZ#JV+>1c`V7ciIBcF"`L#D6p_n(Jc[2RNn`]K8a:QGu)0tn=%#ta05>du2*k1m#4F3k;KPf=Cihi'-nY;GoI1#9rKl;P3l^g<#X'!N/_$faAHbf2R#rSTOpon5ND*q?t&qmVM3FS5.enV=/,Gg"&0%rY>$X'5YJu52:M&D*%3?qo'@IYTAo=*IQkTr3Dro;)+2l/O$C<KA:i?rY94_'g=q[558Pd]17)bE3Al&DN72[6uS//_l=c,YcX$^%,s=?[YMDT*eYsV<'K,mB9@n(<Y7jfI3!a-a+*5g)E<kV6IN\L5RJ0r27+#qb^1?]p<Q_0OdqX7iVJELkI\$i<:o7RV4c%-2^4GZ)%0.4\PU6t1U2a5r4N07VKHVMobJTdbehk)6Q#L\$00Snf;;"Y0\bPl'8HB\3JI"^7<psCPR9.0?*F^0jgnmt&BDha*hqM>5n%iqQP%<!BJuOD2"$r:pph&j.CLMnm!-G8,kr9?D($5E(6NiD/scn"6O3=\O'o,W?#nBDmGn3o(--h[mp0_#[Cj-9+aHh0OJ\PMLJM`=^4;%O=0_s>b=KhK'Y;A_'K+'a=DY#c!9't=\n6>Rsbf0?OE"U>64H_1^&>Rr+D5f@1?91aIu;AQj2TU]EdoU4kNJ9?KOY#HT/5aNdlPe%3U%,.I%3ng_p:o7mfs+)bkC\VQhh,_2fcMBT;_-5o)?]*%KPC]KB\J9Re>jhc_K+6l#Z_!4MI`$`S+#I4.3_Hs![Indn1Gmg"=]`%#Z&=hF5jXY*i3(rhY0]lp\U1K"`",=!nkfD9/Lu,#R,q<k[Q&?%ip??(4"0?Urbe,*GI2S^TVMcJIZ!UGS`Z'aL61@q&j7tr"B0c%<68c/9E8lG*BKSDp[:)24T&*+dVWt(d&(u/$bC^H)sDf:cMlnGY/-Dd(ZV9)FruO6E_is3*@W#>q+QuH"FI6#Mg5t):SeND&22HJ%+6,N2GK6m$'5D]S6N#etkZ<W_<4X3@*[cd`3a>QAV_K`crDgHTCX)X&lg=cVl@(p"XIN,j)2-"5Y_0Eu;YDE'D^K@"a\)F#giL7&%TM8]'mQU?"6Q\W@Ii$GF28,:IGrKu=D@K&_MVqrRV7gF:WH]M#9a`Bqg_\msA5:+T+sLj[l.A4350f1CrbD-O&5D2)gPlR#o>,Vt%fQink];_:o-'3f""SUs,$R;;<O^IOu>$bNr?S=3jl#t]d91XXOaegTM&>2aFVO0q++W#Ona4NhdrfB8`T,"XRpQYju;e6GA.[_]=%]iV26j*jUc(A7Sb=Y/Fb-0tNoS%:7N^\u#]C;i]M"YV+;WUP.ub1q"NPlr]ih,NDXoT3r*a6tF0n$3gWj@tE05Ic<CE;HebZkmTR%p[8)7hOe\G:H9/6*_n%O&D3:"PFlCC6haG7@uGZB_(7L`j<&n3@hS3:_<K1:?VKTgHff/0;nQ'SZma<e:1qbK!G16X(iKROh!N'E%812&Cj8n/K89TFCEiRq:HN<Ia$,Mf\FoEU.hKSR()S_+&`TK#SeZ3;CcCW@<0I(G^lZT?CmCZ"BGX0/M</(MUd`p(qq94'Vns-2>%1V>U_8@7HKn5p^fPO1j!/>\hs!I"J6,PfS(HY,kq[uXV*1m6\9D%O@Qf)VMLbT>+nQc])nVltrnkKSSCJS>W5?dG-TQ'Y;-F(V(Q%p*t:d*?UjF^jZR%("8<"3^]JkgAECae$$!Ap1O1AD!T$EM(K[sKuH>Km=8l`o>Y9m?6skQWK(K5W3<CL@-?Q9/,PI$mV>r,>2/t`%`fm#9\Z,iB7r^c)2deU!N.:9ULQd@4;!,;5pt*n^r,=b\Ka1Zql"RPE!tUDfZa0>6Oa=^nbn1%N]FXI9AO!?k6oF0f9RrJ:aJLlr%1,I2)T8nbK]EKm11d_3.i#\D@/\nY;G(CW?-7gOalAo@@^J+,^BF2^d[I['D*'[N141qh!m]`4kTnZW>B]k7&TD$nUm.jGFg_<+n%jT6n#Qm)_dn2]Y:Jbi:m`l:mN,<O7imulbJ@4P3D%&\s*Vgnnc61WL4hY+]k1:=fJpY>9Hqk0=o2a;k>nn,K%7q%]V\));BF1\no%&WlQ:%sThU:Y($cjTi.$.!;J&O\d/S/epEhq.SFO',XDT5QJ6:6&tD@_#F?"JK[t^-Z6Q6K1u7@7g9>L&]Ue26q%,4KUtI,a*.fS%OR%U\!tW3X5mpgJnH/7P8.d`6Q9KYR@)5KJ-_![46pja[Y_"KOqu@B&$)Z+qB/1H$HPJh,rsP@6V?[=8h+8<aRpWu.>^KX],QYP2%5T6FO%\C?f7!#<5qW^Z!g5(3GH[iam$9b4mZK[G^eEP<.gS9P*J+'e/WKf*6R:&4Q<!k"$l-&,mRsf!qgLU&`N<TCpRt))uj,pt,%qFdo8([*.15<C)i>'P82fg)5E%A&CM\^\ZDnfZcdQp,*=-_K4>2!_3f+7-Lb+AuNA'H-HeZsUTi]@9t>i;Epj2VefkM@^Xe.82?A%a4^4TTdLo+`!Qf2Fr?n=DJ0$Y7sg\!oV/&4m76Q5`MiGjDSs[]IRJ21!27aXbsfJ!m!cUO2a.^6ipCfR(Jc,%qQ;d&H4EPUm1DHo%[=K0>0e%e>8"Aigq+XrVl0QSn3tqO>HU?<]+JG`5k=[c;A*RJPNn@SaR=?,;!g?)\5f8(tnarr+c,HI0hfA:b0^O=t'A\ke7\47X%`Y@+WU6=?h0WacNApHVkS()+nI#)'O_5(dNdY&@BTnk&urlZ?Icu../J-*C>aTa3u0SiWc'4Q5273p6T&#8GWBlG`O2[X;.Y%)r?%ecA1J4^c2*,^/5<UJR^OmK4\BK\[_YHDRr'Qffm_Y3&'@QsiCn'J&9.<UNjhYu]3-'6E,OV7W$D-23I_[13\jf"/LlE;FuSDgLM;%Mh[Lcn%Q(9pADJ!G9n0pU&hTBp@4*5a.nepVKUTXB<I,``>;Bn6r:C@ZU_DrK-DSe@r7:q.oWX!0Zib%@1W:T'-9N'8c7j=55Pp4%E*9q,">\ro@&Q(mLRh6URIj(2588O]0;`[&[5'q-0UH7UP=g<;+cNj[+/N^#ed@D.;N:R//(G@uab8$9PJP:!""`"ODn=IKZ?$70%JG6lLc9j>O[,lj6LMrX8Q>c3G2qb[,JYJ^0f2VKMR,5+ZWDDKc!TOl=&gkGQ(r80R5//C]o!p-Tq2<o:-G_2hFqj8uie^\'AstoQ%Ls73;%c?TDa6GTbTV;bq:f26J7!*jY5XXmjkm+?&##GgC-rpF@(qZ.;ofN9jC^j?i>Zq/+p[6`J,aWEQ:kcTS"eLqd-Ef!e>.hid%XDr3_hKS#-EHm!QT?@A@#A*CMXq)/!?E'JieSeA'&:-[/@oAlXAC,GHgE,rEM^#(>l&4K9DN]?SP3A*-G]Wko?NQr_S1YpIcGK1g%'\(CHj79!s(EMDt4i:#l6#&<?Y&!>*$)8YL60ighEI#t\D3!,facA=Lc1`+,@_1#^];VE'6RmQU3,a@IZ9E?*\s0fZ&)n*)<<<jg%>3O32'OG8FU?m!l+SK86?=k=2On=&j5XJ(L!pXXQ:90bd":6aEHo6G-0dV1>:<Si:.m,fm$)HZD5WJfN%n$N#Gi)gMD((EFnil2)%R8CXSg*[;Q9nA.nIDL8V9r-^++kqmV]<Dk^$\j&2Wl$H13EZ`ogaYM.Rp+neh#4h+UlX6t>OAT]5$4BF3Q90n0%OZ!9@hS\reAXP%#E.Qk@`IO,'89m<.@4t(W'7,K'@egITqu(M1QB&hYZ>eUnGZo7F@!c[$uL'%#qM98$9+>8BJJju-ekLLL)kNi6@m<mKQbYF>@Z9G%2R19H)0WZ6Q:nAif1Oq0f_W3g;#OPt7:.RA5XiAi).Q+pW'_:t=7KpaC1'e3KBN<$^a,b"_<*tq:UeKMql//g)-Gq77K.?S-="9P%g`t#(n5SCXIQm:sfXK*s*92$403\nWhl4r[e*\c-:>.=Eij$\IQHgkMa&LD\#01Tsd`_!qUQ>CL1+\F=,T%atSa6%*8`M+.4IBQF%8cT95^7T-\IhpBQ<oW%-TkX@S/5cet@/(_nnm%g,RcWtT4=$`o0k-L+8ptT:j!K*HZg"[E8#Can.D\f'&%l/@PR2]RGI*q.D:X2.%q9nG558hnHprKpjdiSIE<mN]qjaZ^2RCWsfP?/k#D;C$Y)sHaB:NP\nT6DC721K**.-E>4cQ2opcq,3h2jsThIuT]>RHb8E%$KF9%,EO>256bLKD].$a(_TS9[9ep#Dm+_)h'h">T[/Ae-_o9o3,MsI83hA?&k_YQdLRK!_`MXD"6_6.JLp5M[BlDtD6N-?0&_([i%0=T%<!"m!@7VLdj?<AaF>,pa_/XLEjfft6.b)n2pQM.Bod#)aa2kdff:'=O5@hml"0CV=4shsP?+r<V:6S"2#V$'*jICiO^4\;9Er?i9%aX4"LbJcOsK/]G2!HYNTSG#l2^EanahZ7nL./E'3Y.Qt'$[)`%DgmppQ0^]dLFP$/c_K@bs7#ZV">;Pq01,$rkrT(@H*]m'Z\TQ0%nD9tto_CUthWoaLf=TON_?nn&jU`/c*uILm^/n&l*bs)QJr]ZcM&M6a%r07td,G/ta*UG:]#(dTj[_fW`Cm2RgVaOqh2h^Teak_k%kZ%!cf#4(!id]:dUm'\0,\V?J"2"T]n;`&/)k$?W@o5&_,n35c3;K-%s-t+-I_Ut#RA6;P1int-I=4Yka5msLD1I55rGhE<cXbmq%hcE+IY`jK*/Tq\eBG)=4&gf=M*ga8*RG$9=$UD.I[#=72-en=^F0[t8'I`*#>KG;(T8&(6#2r-e4Ct*&(El,,^b=&KUa.cNh3'E)%OooXm(j59nLSS;hSO<ePe;,hqnklgFC8,C4WlG@&(H30DJCRfl`5=;'[V'cObe5r,PbqcjEZtJrm5l@>9aW#@4%"Hpn2AU!T;4Ag%kl=rlMXXg7F*d]pNt1%K9(7+LdW.uUEHM-L6dBk<h%r(4(M9K1ea,s6Vk9jW_e:W!:>N=@?"mB/oAU7#>s9=qSYX@&$HV<"DRP_p%o"O_KJP5HaKN6P945k,h`]:5u%sJ(!?-AiF-mn;Q,]56T(Wi]_^&V(19NEpsZj6Erdo61C1Ykp7D$b*ZceV/?h)r4'8MWuKTHJIp%AR/?B4,"J)?LL'46s<^BZ["ZG4APNaeIPB<\9uH(<[+&K,RWE)Q#[A65h;KVI]7M*5\3o<B3L8b-FgO_r'J0l2#\/\*iWMG;#3>;%TUSL?hk,C`8I4d_>D`:[._Y_I9'fMi$@;3!`t`;Ga!*2WON@:"hs8Vd,[u8#gi]M.YSQ>n6+''TIdeoJ89aF:'MFR)r9\bd58f</%8pCW^a+7Rlba2m&A?`/u+S%q*%oF)oV5@]Xb`>s^WfZRYPMKPT#>CC]n!q&1b#IQeO5>!E0\K0b6MUZ?an)KtGmGu6cY6RoK8U-:%3'9:4&/C*q0'jUd0I%e7em@QSb_Q0iI3kfh_J'<:.E/(0g%d%:miFM300gY:(BY!%^&Xb3e>bP+FL*(X"g@FbI9fo1Om'DhP'`q#%M/m'E0N3Gtr_0`24%XI?H`.rhao%i;9/jU<^1"QP_Y_t8S4T?PI(o-7/>VL-']ZlR#+u<,eqQ]>WOo2HdhbLV$5b4sPPi'GeWZP^%X"1QtP0*kfjnm.VU*i*34o.'b=NuYX0caf.Hgu,%d6p=%Ou!RG@E8$9&^UBEa]pjqW>s9aB-`Tgd@^$J'BN3cs.$Se8S03[>7tTR%rc`TKm5@HnUJAGMGDBEXf4![/VXOA@6$CaoQCIoBU^-R,YM#PXU[H#f.0W<bjA^QSBL6q#_Eg]*V54W93D<0Y:ea`uT7l'b.R2F9%-m:LgFA5!dI=&VKjEa_kT69V;C<;O;@NlELe$$#TqHce_2Puma.eiKpgY8F,r!3-(HVi8njLCK]%BhGEQh'o>arNW5Z@aOm*d#oq%jbZSoALlm/ET4KG#1)WeRTOTFFFGemU'J@-(n.KG-8S=J:/7JBXh4.H+t%bC4$&,1r18uY&G/]ehhc6##NIQ-b45&Y>IH#O%%j_G%2?C7c[c*f7R8N[Pb`'N8j?-O+9r:;Fp'IEIfamqQF-ODO4PGiRpOr[opPdZo*o)BS#SUYSC0$:VC[`g*`:5c@^CA0M?:T-.\lCHM%dlC#45W"aT--%W+8j,,>WMFp7S6->/,+]YG&Um_DMh2nOSperUo!ANFXY"ij+!*$o.qj[%O*:'c54m!1hbOkblh%MP&*`;ZHW%u8%#!$W]Sd&8SqR/?W5%O<l>JBq7qfGeulk,_XLmI/01?(S^7F#4Hr6\KM<4H0+@W]Y&,r8'4jbmGFMl2God<>BFC3WL(?Z\9s&Gu)i%hq%DfBDqLiaBZqXZK]6TU$`1*SM@KJHH2E;eubTR+>6hX0lOAP9[`Ifc*4,fIC64gSUUg'^n-_EXg_*tO'iZ"h^#02Oe3qcj$:Hq%7fdIg4)bkRU%kQb&'Vg^N7-nBVk)MeUBkknoa@f"ps+WN\$-5;4;IE60,.!(*CfV:c^6r"I(;p,:,)])hb7\W!lZF7?_#>F!F8qB%:X;eOCcH\7anj=*Ds*U2V<3blj6+@XJ_eA!p6g\5Y0G?+T"-GEGG8o>;oHb0j'9SCrd6EA4M.!V+YSt39Xe(]dj73+N&@6!R/I\J%:>b/!DPc+(bGp`ZL1^/7#<L#W:L86Roq=kX81n8Tpb_>FnmNg>mD&$%I_k'(U@?OQ7"jg,ga%?mJf"%LHMhfS3mK);m5jC!>oOb,%P-lY'daZ1n<U#u!CO$13\S8@Jb>tAC5<5IgO[RX^lG^_J4E`cVB^RXCnE1=N#I.\4Ig)%l8GaN,W42='=,D=V963d5:XC:R'\3/]%cM32B70eaYV1q'4P,`@`pqF#''I-'Te,FYkiT-$2:/FI0Z0"f47OAT[ICM@&$Jr`k8gj/:i@")m=_=%H2F!1$oBG*a1O9fafmTXB%':(`@<"Xk%blLlNY'_<L^0hg?]GB9F5+Wp%:$"Y"It0tgDDDd!1q:W>C-Q@.ddA(BBaW<7^kRD1VjM(YlHSqOY2VsgJM+%2pu#W\%iN0j(WE$1[T$'?s[ON+u)(SK!DR7t@qkT26pn+4RL:a^&q;W6TD7+#Xo,sXS9^ccI+3IXt0;b*?HScWqP<D_"kaM*r&,5NI+$K#]%VPU&5HMT'S\F>0#L,\nc'XQ=/T$Z"tc?&K]4+_mkH6r(qbh,p9>YZ^MCQd<tEE*bG04pfp>2?N.2VsJ/k^5!D=o2Ih#EAe1-h@%s%Hj"<&3u]3&Zj-2?\`:fup\0OF')cXjFU)-dYD\l*?P,09=6UNYoRL:>_H3aDMAh\o;U&njI>oS1j"e`s8j6131n)@j;U30G<KC.8%C34s&-@@2)*q20bij7,ls.8L7SEuN8S`!(N&4&FLbabbi.G>IP,]>nkr,tjf]7c\-I9)3V')bbT!!l<O<D!PM,<qOQ)eXBbT2rQg%]/?;R3/K&[gRV.tM#PpI;1A!UA3PZTSb0:f@i)cX;APOVn:cVG82[:,Ijs7PltkstOfA-p25>6t4Jc\e*<Eq3f)#rJ*C$o/EJiHJ%DIilfeMcXEni66jSF"M-B$1uTikINHN9qA<3K>8g'!idY9V7+YdKUHn_oAJ%Hp@H&EV5L],[NYi[:3]b;p:EW*^3?7Z/"SV8_+fi%Dh0sHQPG_npG@.@*^'etR)n1$Uu,W.<,N`A+N'9*!WE"rq->95R[+U/nY9>=JqM%l<*+3dUYmrKql*>g4E:1QV4gO%dgAdbPoF?<%Pn>Ggk\#s^%GGLB/&$SKOt;r;HA3U(TmHXNHsY'0Ugd9%S^#G%[;jM;jK#4O"foSsA\mim.H)U4aAIXhFfl+?[Yo(qPdENY<&1g5%0Y-M_4F,0Sa6_YfKWWOkMVI9MebA^MfW+9e5)8%-/?[3g\p'5`VWMc@4;7a>FnQMlrXt+4%XV9Rf1g%7+2^_@AC\1jVg2a!DJ/.n%oPEV]mhWVV\M>OmarK5JCf]9Fi=@MA3no'o)9KcH]C`\i?;=jAFa=fs7j>g6'%nZ/9IV8a+$:*O8#fd*qG)=mgB$I_rM=%[c1A[[%fY,on]pOuVV=U`?pdiVj=f/mungSL0EVfq=;KOR]./([PZ_oj4p=?*+kIcf$bWF,Rm`rk1Baa(d/KT'oZ(.sg:0+dF+A>`2a<mKm%&*T)8)sBn"Q2"g^M=h0,dk9@E-81t:)U<7GiQVubY#ZV_Y;hFuA9n+8ckpU:rNYncl3$TONlNZD^7)V(lWc>R-<kWUm+d]sJN920%du!^(I+GiV.E`rW/X$YBb4Tf.]!q!<8.](;.RsP)Idigp8cfX,AW)D0Vt@s\%&@%'gRfci&s2a0ronuk(+'N3rg\SIPj,VJ_C=>u%[o+3Jk5Eg:,L48jJbNM9*)OBbmCufdGEHWM19Fi:QW\d()5!D[GCeUpR,R_-r%?L?,f;.t&,hsm/6Qo*qs+hobrWDW5o.nW'ZqUk%2-4<3fb;o:<H=:c;U*duIa7J=Fc%C]PcSEuB^7/]Z*K?V_k8.J(NQCEXbL]k#.#G9=!_BpaKBMMNj!FS^""Ro.#rdNL/">!Qa+\;%Io4d+4Y6F_+)4()c8S:YSii2^o5XFlFL+l=ELf.<,=1q?>)cVNRK3"=n^SEZr;)i^^mP'h!Pc>q5cm"NI8Re`Y6f1D**a0hr9Z?B%UnZ]5U4?TX'7`)#[MK,FqO.DG0_Q:dr;)i^TJ?>%!e,PlJ=>Z2qP&LI?P@sP/),s`K"nuGJ7S*#>nleoCB?2&e+TMdi,>e*^e,X%%MZS?U9`V96m\0]#J8L2:D/T\FIt,/d$.bSF\K#!`CVG0Z^_SR.;!YI4Xp<V=jT+!T1J?=%"LiS8!8_1]?4UG<>'765H,DL%bA!98%5ChHWf`Q_s"#-Ml[%oHdO$-&O(OBAgY`GX,lc8`-l"<UlR?T+R^:d^uWtK7'WGkq,VhVBL6HQH5I9"[GhNO3$Edm.c3Hs-/.I>=.%-JmoOF.t@8g+gKcIb2Io+g<Vj"Q*V@C0[G,Z:dqLO=QSPN?XWNfH3hq@h2NA+.rnR"3FkgYG)GKGrilKn3Iae^2lt/r#F4YV)6mB%RG^'2Qhl)<6OE$g.MC`]q6YN+<3l0*m)T1R+.B4maN'!=EX8F)PrQm=kGJsXpFho\aFiRF^"?-(fpmKX9<##,hYXJ"O$Zb9Mf/9$%7j5[Xk]2bA]O_`NI&?,ZX3W%5&4ZMT#a-imBsnF1T>8XbT$ts.j$"SO98S,]AO#_f(*'fScXc2o5$#RPZf670ck!Y`'kf[eJ>!Tn%BDjFH%;Y3DGUDht*p=GXQD8Ukn[6P=A>F1%nK*1U,Lc0-BV4j;p4*Jrb*fpQaT>2Gp2b'$J!nYWLkBq/EsNC8=Z]W"b:@Ve0K[C$%W5Zrh;CS(F1lCStc43+hS8gZ2eB7.`s6%<8"#;p8l1[ldU!G$+q0^OeC/1Wnm(g@`S*`s8?i?l_Em\dd%g@IPDc(],N9"Sq*ZHMD%cIZ>#I'r@="7CQoja03cN$ddaIF9#*X.t1";/CQkb28bfh,--)I#":J[i[l/hOuSb#[mA[4+R(nU>-(Mn+#;<.K#mp2_N7Tr:u(s%h9LLU\gS:Ckkkth\:B'V6.<U)SGUJ-r(=L=36nX!Os77Yn8=g5,*W6"pKX)+a30(c,YJ_WB1?TCA/84c7;.hCTS8HJ*%SSc/o9Q^%7TA)DR>5+qSR^0S3EG%Q7mpLGgaO%RPA*U(_\S]9"[e1LjMH8>NK`I[7.[_8Mj)eL`%nn.d..esd0m,a9SDG.%XPsY/1nIo?ApR#%-^,=3jfsMrcoaG-eaX5T-G?>`b>8NU,[Q'<:5\NrUU9M'772tEOVgYdYl[kGUlAt'>/?cJ@4seGaHT7(,>'Mo^]:GC-a^u(BnH"+%SQLacPnoZpPST_J8II$Ul<Ej,5W$+*M%_=XZ%Zi3>C8isH'Z7encD+I#X?DY#UX4W!o,J?oor.4rMCIbH@1Y6,J4:D8CNa-nJj2P%6sbBZL54=>1'BW^M_p(T0d<\)L^82ii+7Fp`BeKcJW0pZ+IQi0#V.-YZPJ'(g'!6E8=R]I,3^E6P":KR!8oC9?m6qkKb+F%#NRED%b36)$,3^D[X>1D"2SKFK`W8U<_'HAn*:BuF748LWT&h12/'plrc\\HOUEuM=!*[K[4:m4jOX?BV@CoYCWC%j]$jSb#73HN"T/Y\4%;M5*<,>GgEhND<2a^SZu)9IW.+rmd]7U"_5NfHp;Y5eme"3Y]V$mi.64Dm(_BVQkCBqZh>bT(#B@p!:n!AG&V!$_e"gp#ne,"*8O%;W/Akh=)J)#Ub]l<CG3L=d4U*Kh$f^72e]e7-XuJj'`>S2,T/0Qb#1Z3R;b#S&cgn!##I5'Eq@c6IW/kb/V][=@kt*_eHed6&Gq!%P2*\RV?8/WnN?kSOsEn?UNp+/XqN!E'IeLi[<\5A\;(gaHHA!?3(fE<$V/*!.#ulna"^O]VEbpF*2bCn#b)q?Fq_@jYQX%'E'+^@%J.04*i0#D17MBfOBO2m-;CI5"+r30REJcl0+XNF#9bLS9"/nJ!WF;+okp*8(-@CNk$4q/56Qi$Igg:tf!*^:b`/;XM<.l(/6@erH%5nSHAK^]/L2MWhN;ZIaGXNf.sFdsq)"crb&Nfl]"Lb*f\KH1Rri)$dO4Kjsf'FjD)F'8r%_iW<@FCmfD;$*M>Ns.ru_:IgSJEU]u%=a3^FM2ahgCI)+Al!MoJ>R&"JSu1'A,>'/XlQ^Gk"K_SKC]^[>Lg3?630*X)OQDSQ3)Gqc$@)=tK;P:ZjV:raH@Qb3"M@rS!!\1[%(Jur]N.Bdo9b\'gKIdq/6lGt)N!0ChXYg*H8cSj*O;SWJ;uiMd:e&O1K0Z2L&@">o)JP9]eEMKPU.#'u!!8;tE\>c`ZiGr5roR%(%nt^hJ5YCOE917k^6B<Q32Gk0d1^P@YI9;V3?BT#%e^2+*eAVWV8FR8iMao4OR$/EY&jr@S!t#%%/En&u<MRfBJ=Sr':oml:!4=Do%BNbMBXh`*UQ[ke6^nMc\B$iA"[=Z-o31bkKJI-j":e3kc%iUQeOhO("!mN71EV2HH.3R<N#+,W`4!dEiP6f&kK?Qs_&hjQCL(9<)%8-qn@a<:FHP:4kTKjb!e?;^nYBgDC4/HV3=28D;hU6M<-Yp,8H&iGaNq$d\K/PmQte9=GNaotK@VnU%NZ9\Qph'tW<Qkt2Z1,7b;%#'^<=LD:ZS,bTtq%3d/K^QGfflnc^Vo*0Gp<TH;$&^;[7o0ai5,,fqk":iCioAB$ETGFU6@a.cS68t(03\'P-r$5N,q[IHD)C868%/V1Fi%Bs$`a<j9IaTW+t-O<lX]HjQ=$V`/W2N%i3!kh>I(^AY'"h#Og%D\tdku$2F'@83#!AdU+0,OlZ&*-`F<_ZrL!&)1^;j+F/%TJq*%^n_\.JE@^H/Ybe'2o%KtobgAi)pCha,@CTr9$&2<FG:":3:d?!$+=.#A]:=>_%r/@'.$4_(e_)C1rni4AI7$b[I@<?Arm-)%=(jEA\H"'[%5\8C2W=qc<HnuN!jq9)d":j9:j;sqV_iqHEAKQhcjPPZ!j%6i$^?Q'CLTP(TT3Lo28IN<""5osZ!;P'$UB.0%bNHJ%R0FoX/e3h:=WhlOkWk@mW(^bH,RB4qL9.=;C]a,Ui%#Fo<X=M+=i+l<O"hjS%E:KX'M*>.&J]T61)u`V0J/:5Tk5X+/S[h-p_,b.%8+7-`"dI/[B,'-oqe6qX$7ou2.5ZPb+Hd``3&Cit*K\)c\ZcC!HPZLOC;c`X+Mgj8)5>Qp,&I;]^aN.<!#lQ9-FbJ*3fSgh(bdW%%"!h:h="+s<OJ%SPAm3l"d/G0G3RT%u+Q:/`!0%%6!_id-o(WimW*'U$QpVZ#N,u4H?ij;)/GO#i/r62m"-=sh9!IG[']VHq@%smn%0HcBGfam,c'!Q[!#RT95Ss]HbQkSse(gR.`0n^#N=T)ZqM?n01'J[B\fKuj9JN0l7";&$&2*h8%"9$Ie=bHf"=TC>a,8aRILZr1_%3)nYrp`\\6HY<L*]`F3WG]dn1Yn^AC#(VLf-kHNd(t8bo+qu,S7IFa7\4&Ij3$#WP![*Su<,5mmOE*'Dasukq^+cct#qZM^%42iK%8/)Wl]E)=>.19(<-3b2F1_>@9)US1h:_Tl_WQ$VKiBCZXnH.*W7R9?Z5RCj$nX-P3W+L:0;]K#i";ZNW5pII^!bjpYL3l6A8d!BO%*<8eX7k"Q3TZl1"l9.uF<ra]9T'Zet5lQG'^]]lJ"^hr/!:0f(V[P+K%&#2G3Ntdn6k1gHCe58l-J1c(Q!f6g^rp-=JnLlQ,_LT%%oEo]d;\IbaU1IG1,mJ%E^rLYOD^Q-1JWO"Ys&][`!81kGbQ-`*VgriK%H+aK$&..;>7/-mkn85p"$'n?Cm#(M+O>Z&_b/"5k]25J%!8!#`L^_,:6B`h'$[j:"710PKn_p]Dk!cBY)MgDed"!l`nKk;/*I-E`MTF0@L,jM:G10trZ4`<cpHTu5[#?U]`Z/*P+GO"qn.LNU%[t7s!4aR`e.Kq:#,-TXRYj!:L,Z,/T?k*8LJ0&@NCrGfK:d/(B/?op=-$[B!+Sc.,Wn7H/YL\AH"qb:m2_`+c9,msOqZ)i%%$CCn%/1V/26\H4+#cS:P=;L!)^^DCk$fFmXdN$pQMO-m:NL0hN!1BHJSV#"gmU@o^TXp3&F^]N+XXoE#,V-qt&_.7IE1e/+UB[3A\AT81%&cE_X$)A](fJ%2PFn>3sn-8:f2fAs8'2hjXOkjFK#J7lQ&eH=E3+)r5\WjCS0WHfN"MesYAH5%4bubZRTQh1MJG6h\Q,%Zs2V]b6%bqMAGF=:$a?&$aQ'I9%d26&p*q(RQ@U$G4BlN[JA%+DFC;?>G,W2Hjc,`XKbKWkcsL0=U&B/Fc5WC'j6<"BBAl9o2+JJQWN'c#4J%n%nSAAORID4A>f`=[ci9`_3+]iJ?rV\DUMq4><]_e<052E-W!$P_*)5_e@Em@>r%DfE/LCJAN/NM6PII8L&B_W[!?g5VO>'J6G7h%"3cII;"[[R6%L3\:cMp2#W1mAQpr#'h#[q7!YH?*7=i#s((JYX#UQEo5RR$s^hX.9^`GgH)]FOO'Sa>Rb\7M8QqK.VYXube!]5G4%W]%p(+bf>)6Q.4=r';!O\r&=95hXLL@)iHhkfHP5/s\%#,lee?Lri,k?sB;V6,OCdKD"1m+-f`QdgRrIBdL\d>!VXE%p:dc(g%\3%/DB'_#md7ITr1HabFiBBlj3/$%6?a5bmEGi7Q*Mb.q(JT:dTGbi[;JEoSJ-je/-2E&1E&X@_Dj3JsGH;^pUa#'"8H,cmi_D_6ui,%=2pIb+:[7)=\sF+fWh6N\G>TX$TXA8KlK3`i)!&@PB6i*E\H+mBNVURTEKO3YR^hn4]#!h`^s>I97/!kd%YFqPnJrHL`Vo$&X*_6%/n.Ob)_nMB1(eI1YQZq?,?g.?P^#,h-H^+u@Llk9.#<bL6\U'L!fgA,oA>EENX\CIcC.9+;NnhG;hD%'97SgTBFR3k#*t)Q7R7.*%"$0:b,BuJ-d)%9p0YW=n"3P4"N)=npp(;S7epmoXc4mlc5betp@BuQ?`hRRk-6g'p6/^:$)$p``Z[l5BZPMX[Xc;Ir`EjfP]%B>"%Aq_W]MJ1j9>%ld>!_0&kp`B8CS-$7B.jc^KN\/AkkWn6(_M'+[.26MJg@2BrP:#cPPUIhdB1*&G*'q%`neGA2F=H03N#\Jkc4LkE%8+j`mbJKB\'t?Ur1PfV"6m@2PA4>UB@F-PL&Mr?iG`PC.#o*r_9$q=N1Vt]7M/B6tKHs*7EJcK0@\1Q3-)r_OCc2Ps%S\[2&;1s]%nrq(\/t+>iT25cc&g8V+X?`9fM1f/GL)`,qmINS4cisPH7-+e+N\#u2Vc0NT-+&1o!#MbUU,Bd;6FT<)\rK&e*9;WZARh6u60f7i%GRR8RBA=)H%>,;Y,RcE/!'!SOBEJ@:fU!#%?4abD?=K0:%+uO5[:kR4J!:-9A;R93._*Hg+tO/+#oG*WJ3]a%jM_'s1bor;C_Dmh%`d#l`7?fPU(>q&l/6!jI#>kN11$Ef^'g9:WT]6*R8O,RpV@69:RN3qM.@s$V_\aa='=GA=BLPlk**[*q.`*Tf_Dg+:&ISiC<)e1C%o:aPSb=W.sKWt^SN@"$bML%YuMrr@uJmQC[,dn_S[P*Au3F]M'`.irs@%0_E!%8e0(MEeQ,WqS`CPP;ME%.;F.JOY^M+@dg]jJW/%b(qmV*$ue$J_"68;A=-P^8!,LGmiZR.PJ(U5I#nd^)sCD\Zp]s.9^La?IRU^Cp_PUp2Zim3SIpsFsc`/m0Lcp1qG>.L&ne4rm>s'%LdqWm#gP0XE7e2RKd"$Y77KRe#Xb]G!n[X[=\0WRecO<oHsd[$_D@u$*j?3>*JdN]4bBS+`6"LV^hY>b:h7mLM8rDT3Y)!`fKbIa%YXMq7WJn-7PnfC:#\.L%&o:F<jj5cuq*iqHRY47peA2Yqg5&*hkaJ?5(5sL_=d-?(_26%b4N[Xq'qs7bj16FSr.,P:'Mc:E!Mtps%&X+-jU52a*4:PIc+]m;ZjjZS99[L0/8W5r9N_bLn<2j(k9+(J7cOkG%1bshM"3ec`65`QZJ?]hYL#i[&#XLq<#`21U_+J-@#C..H%#G[2&4@RQ>,pMoAi+5#e6VE(,"r,(70b/jX#T3pZC5Jh+L]L!XUu7XMMa9%9L!`Ra)WYUA2G4Cg0W%1RADf*P'rFkF`N/1](j'4)%jDUOt=AU8O%QpZ.7<)_NciS2s&-jJ4JAE<r$K-2q5Ro*&R$$E[i$<?7N"uXoPLXYdV6c'0!G3`M#R.jk`L(():kE1i7Y]WKKS%7\%N7ppf<@LM?kJ@3/YG`Y>4p@[<,aH/Qqis&p.(2ZkgkH9,Dh`_:5Zh9:%B**;+Ai`2='QS_;U+.Rn=UkiXZO-APfg$\P-\q?;9m<s%B@fQ(&mns,]>cakB4^JsRYXujImGrLYsgh6<R7hQKq,?.F(mbT-I/^:M=ZpGUj*5B'Xa]OCf7!fGQc6Q==pX26BUk*5&4fJjQIKc%[,RpUdc-@FOG$#5(kr<m-%d#Y@#jG-oqYbKK/#1g&9(eldN^(:^O;Zrc6Tr?KqG$pTf3)+!lc@NA<P`J/T"aC]s)<i#H`Pn\6C^X%Oq#1>q4.dtlE?=Ne,PiK0R3sG7\#:G]CTDRC_jFK4ICEEEiGN5lgjHa-Q\dr]\Y*.6l94NfXMD84H?n("KkIQ?P)8*K'Y&nNU(tk%S,e#<f:)iF.\,hT1;'/#YTi399pC_!@#KY#R."g!6E^(aC#c#cH6;[Y@Y@T%62HCV"i.A!<GU/Z"g6l.SiMgB@oc1NJn$UR!\`_Q%ppq-iB5B?.aIFLk%OMC_BRXkjUI(C/+19HV/>/Qf$!,FB,faoRIFi(acmmn!i=3_0?m/"jY)"AOmAM$6EC#Sql?;@dB_Yt+(70aj%O)DZ:%1m)%@tRUM,Wc0=58D_gH`lC":t/B\E#D3lpIUJN>d3eg%NAan*?t5g1qKV^P8rPc96M!QK"18-=psB&A]3Zme0][7nd'G-%(&+aiibJPZAb6rL@tuGK!`f/IfJg@BR*$R!o;Gf^,qE`24kTK_7J_WV8D-agU=1E\S.W;cn)_'+R6tY;e0kGBl*``(2!okE=Q$\B%6pDRJ@V]HhZ^4+t%3U@$-a'3_0cQ4o-6ElQfXQks6B?H%=T[j>R0U[A\%k#322lfgSfH%t,4rPJ(ASsKV.E(?`FU0.fS;3<?oh!q%h9[&ERJ\0XYX/?.T9GJXCB@AmgTUaOc!phr]A,!40fk?l=@=hH!f#7V%RJLjN7UUQP:"2;gaf:7Hd9II^rE?"D*!Cq_d)5cI'K'_%qmksY<a*^Yo._i6Gr@M"2JSB:%+,BLQ7jil@>ujP+N&pjkE4G`\Fps73[d%`dil%e[#L_=8..JM#I?/:AYLOPVu'tu4+4/SQ.S3\%:$Gd#nr'Aqal98Lh<q$o3HOn+,:,jZ<,OB6Go@BhbL*:G\rGIq>p`%YUuT81:9R$,ek0`oDrH,DaI/+8U),ar\[!sa.;Qg]WR))Z%Y06_W`/b.ebC`?R_\FN=JV/eV=ETPDE>mAYj'Zn$BH>L)7'1FR(^hS;(LrTag7c-*"*Ak_o45Uq'6A>`:!dWDBug(b&j$R(]7N`r%CLrHdXE2OJUdU$I)<D]XPmd2NFJD4p8]g01$XJXQfhAA)e//-oaF0sjN(h].Eh[).$HUW.#oS9h.Q/G[VPN-db?,g,Vh_Vs)+^k^%n8h(=Hl<taD,R5K<j&r()+\Ug4@pF>+?JBm-aS(8qW;>:Aka3&S4r4LjB=ih1ARE^A70@3gN7esS.)43l@_eH%h9R,hpP=0i9"FZ%3LS[Vk0D0<CuW[TkY)<f+<AMbA.g((Tl<cHg/0t?Og93-"Y'>f?QSad5<]^[*[1_Xg16ei%;ZIOQ.uOu!%JQ_a89]@4bB5HY,2S3%6].[m?$@H)-#0()W,7dt`CV,MI%<u'O:A2CBQ,H>2t<G/]5$t!+j^4g9uiS&ahCP!ERYH>4-1k?\sbWlG:s&XPoLU)nB?%TS%pep%?nKtO:CoNQesML3(,Cl\k68r"SpAYRd3"#oCmk)="4>38BaCr]W'48ro0/]^aC%8^b^f^@(>0DCqO1#Q[!EhH?k=<3Cn:;maT'+f%<Ysg8%2fi7'K6G372;+dEokpo9KY0jl*4"g$ac.-U>TGbYNhiq7X8qj(:oXBL*1aBJ[LngP=+!8b-j%GPTRNX58k-2LprC0Z@$^Z%I2On:]*3'enqeA:>qTbhJbt1)6^'bldLN2^%o<VQE&r#?%@rMeQY?j@iNG4h%_!,U$&MOM&01,%"HQ3BM$%=ha1Z!>1lEu$h2^7D%TRH(1.%S4W$(h:h%_4c;G!b+:YM]n.VU6j4PU6Si<brSHm2a-4fg#b^N-\j/a3=(iaocUtlHQlB$H[kt*`nebJ2W8P?SXI>j[NK*%g0QD3"_%m9*`!e4;S,),3AHUBid2kn'j#^lDdh`KUm-=k&4g."^e/HT$4Um[pX[W#qs9J_,lB^oG1O26clC-C3$pp3`fg4,&Qr:h%A:&em.;Df#3F.fC.2h-fY(W.tHGM<I*Cn?<KNdDRo8DYYSq3<:'T@Nla:g5X!tA$cKhJiqmc2s$8QKIW^te@XX01085;ctf+JFSX%#NI^UJ32,"aorYQW,BN)--<Ykock_`HQ?j^DV22b@k-?SCnZr1E"\m4Z4M\@grIDI%El9N5brT:+sdgVH1T;bS&!f<`otRrc3pHY%Lc0ZY7f;h6Za`uddd&@O$$K`B(R?=Rm+-cQ[:[A^SW0)hP'&l^\9VR,P0D,"#cCIpDq=9lc@cB8p$0DWb;T#94=L98jQiV_W?fYu%=]iP?U\SuCOCZRdECNXQ;,[0uD*>JM**/R[62F";>;e/37Yo,%q`NY+*DaquCqea2JBh6@4DsJOS_Kj3@e(WV&f9>i"s>?2"B3,[%UjUk^*J_Xj-Q(or]u!sJZpAWSiQIl/!DYqpNLh!!_Hqjm&-Tqo:C'$eM8UqF%^%D'!Rt$]9$q+X.?Qdrji4KMjY#W6@#4THZW9/V%ZjLh\oW!<m\*Dp<p13#5#ne5U7r`1(",4Xc)sHl9)):W?GUuG7JXbjGQ$Kad$V@?_H$>>uN,8YhPGCM*Wr%Z?bdGATVF]ArW",u\%[P=nGl#)WamB%m-h1"s/*X9[36[la4IS"ieQBuQ!-R/4RCIXHI\:Yt^[e"kHT=J[+.CpYL&"[h-cU!=M^4c3eC7.%hR_W[_4P4Oj%6h[J=c\<\@"Ioo!c"gXWiGYDQA#khJp9d&aOoB<NWuM$/5@,ede@,P&(@XD:0nf9/0J"C-q_t_Sn.^A9H?8cKHMuMnIhpuA:4K1E%]RArqQ73#=:]Xf6a1KL`gS;jDT]hqKiH`kACnt6Xb<jRR:Fpd#c@I8%?mcT=[*mFhSN!u]Y`RD\j1^5LVf-+Si9gF*a?ktohTS#V%2FZjkD*qetA#DG?nW.Y0NJo3#/=O(Y,?HdgpI:<4g.D&7_^Dft^OY"Uj/*-b-a1j`0E:fQI-_kd87@#8NCLOPhf<),ofA3"#Pe8)%"7oT3A@?4t]BT%]ZD$*)Krel-[k2DZI"0@V^t\$dK]fl*[1ct5k4QUB]KQn!T*m[A2?$),r%/&TO;udiBfMr!5Nh^V<XUf@gNhYb%0KktHh-VsBnFh;,lHpEC;nJVJVrd\g[R!@Z-WVip*:5qPWC*23br3Uo\[OI`ZBN]P(33Jt(Oak$;Nts*9Qp5N&&agQH/HVnkLqHi%K>h8,,8n8+jV'(E0cX;H8W-JbUq.E&\8PlP:R/`%OA"i!#E\4-h0M%pbR5rlVVk<Y8=?L?j1^6+i$-Qc,;9CJ`duY("-KFIBoBjX%_-"=/XC4*VgXpoM6<4I0EjSc/,M1skec]0tRV'Tg$bMQ.!Y=A#W5;$b^QOo[^lme7JllD*]DQM>&/R:!.W2]JJG!Y$(/(?8Q;ME@%e/f'M!(sP$P_98gIAW%jKZa_MlZ/8#[a75Sr,C`?6eb+G039=?nODU]boGnm=V/&RS(6S0qW)IK=p3(>e6,%m"<=a>ITq#QN^O$n%9=1IXUQDLIUO.)agX;RO[!us!9,tWrCE<U:`(BS^DN^%SpiEW=gdfEMAVt_#@j5\jO1Q0.h48cBX(c)#/D,k<=$-oSe7$T<[]K:U%9WL:<_jZX/@].&%OO/f5?m?):jb7Md5-`pqKrfG=pFU2EI=KLX_;"_KX%?6q7:pYDO=5GLCI&+_$\]BTi-F/m(c/X\"eC'-lP`[D%,e.:U&gZE.8qdLIB`F!ZD3>WBG)[\*agIQ[9e(H#>`SN_NWj4>7S%u=?e@nWiM>-u140`:\8]g/+>,?0DS*SL!pT>.Y<!38_,Y7S%(QW7u7)m:'d-KPKX#Nhia>U>_nO-+sY11b5cOWr=VFO0!N5)9oQ=Lk)CC"%I#VS)TR1o',2j3s`K!/sg#-`<C6.K*+,W)T21D=/Y%=9\rlUQEZ+/u9RZXMkDsgs^?n+9<6;:6lVL;aT&'/g'Qod_+u<n]'\)!CWC!'3rU5DJVH*J,j=,/`fAO559Gn,!*Tn\:dCg"sW.k%lr,>u_:S0h)=Q;H2S!\/q40nQ*c8B"`uI[[7Ci+L8b'4k=N9Wn+q%URAFGh*MOaRAX/&TQiJsDSpLXBns*Nt5&?S@9=,$3[32$0>%Um-T2gLF_JN&ab`E>;*P/"ZL;QGC_H9-(U]<"[E4phH/>[q#)Lrp(/OFfAHO&<!(Ihc*'4o+QV0AVP1a+9,ahL'8R!r>m>@]Je#>%r84D[ZE(np:$MmkHmD!'NV<.fk_`uD4<bH'Qh^FPp#@]YY_&5%3D8AM:]L(&k[%DCR:HA5cG@9jc/UaokdS<Rgn4T6mm$dEhZqO,%?iIjU?>#%8PHd%lq%7\tJU:mNYrMO-dS'Qh2Xc(nbk&Q;GA"8bcW@BeK1,_!9lLJ<#Uf8?4,;cN2t9TBqFQ!&_4.kFE^Ho[:K#"*%5&N_$UY8-aG+$uC.?UWN-\J1W*@J:uCWXL2cUYETFs%l2^V=P8$H47ZB3*[$[n!d9"UiG$"d1]6&Ehs,_Q$ra'>_N26".,lc(bG?%^aA(1>VQ7jG%J$-$^(W7Vf6LAkj-QfM2:NROYXWpn2[utlI"%hO(";%Wd7g:Cf7:-AQ4j[^kA3hEh#PA"9BD"YRL`Y_kiZS6`&!f%32W(ZrS5a:O#;AP65Mm,es=R4OCt7QjhV`*=?s>qJoK3_l;J+#rb9MV<dW`<l,suESA(h'Rdumth]A"K+oHRY+7cM<mDiHLXW5>.%^J$$WY.2KpAJB/iKp[\S_Z>15j.9fnNN.Z_0bI<G09h!:Htc8kQEt^##ZHZ;.&ug5+FusMpJn.tD'EeP0_/5hYGg.RF[F79C)4)u%$M_QG="]16f2WMQd>Bo$r:iRuMP?gGR>FLX#!,M@89Pd50FJhc6.K(>*4I#iSlXK8BoXPV9h9q[ckPEp?p_^4,6n^8+![M#*S_Q,%icej_Qj_O5c6<N&'0W$]SF^;-6kTmNX'p;RfV9\\\s$qWZ]f:aPK"bZ+l`T[Sa1_BoLLkDjQ-QG*_Y7s`b$*4-e+D-F1+oE0O/a0%+'NhERa=/WB`'MP&MOsIiXi(UALK?fq@?.YLsE9TB2V<gKi#,?Z:O%r<A_6Y;GR)`a+5M"f5TWcDEln(K%esj+\Ct7CkR%9=7M"I%930Og@]+)M4f4'(84_fRRn.k(_qC'.P/Z@CUs_)M"9dJ<Y2&EIBRt6eQElRQ?TksuZ:#:^>BOIE2!H>((3K[Sf1,OC:SulJ&OMP<%-Y8du#D0unG>1IS\!V+LEQdV0&G0himb:jO*A*Ea,M"Y0UIZ^^-_Y%jMPr0Vh6jF1:KIGDP,B<5GpS(X`-CeKN7tTiiE$hPfN(%q%=R^o*>rPVSk+hPs0P&VfU<A^jJuD/3X9T*n7"X!l\<S:K4+bJ+Bk)6b8E^f"2C,-oV*Lo9S+gLsSkt$%_0`=WdW=<MRr(0VD2m&5%)AHhnQ)bV=?EHIX1.Ll3X[l5s]T+Y&`+Wo![SA*2-q8UZBPSmj/A6-K'KLSl)G[Wi[AmbH*IDK((u@O7J<6G&e69?R=cgk$,'(D@%5ba,hH=Q1pqT7<R4fXFC<EE>jk#Z1i;&U#N9nHn[+fuoSm\3(K%07*!)HBL?8D!'1%aEPpk<9BOQXQDkBgSGe9g\"j`\;'I&HQP:%)(c2b/:bQtrjIY0[PSFLBi8oE"]-A&/.?E#R.F\IRK[Ss$$60'II>l`\M'?jE+*7jX6AS$S"1f,Af@ig78IJUgJ)+=G[a4APXmE9%#oVkDjn5g+qtr5Xo2rA5Dpu(eR-_(k'2#QL?lY/jMj"LZM=^2jpa(L]M,AJRWLK\A%`\B63g4q!]PSi\\;?WNHsB)u;0%XiIJKA>%.,?ZkFsT_IZ:j\2S):qr'56t#K5EkoEdffqgR[rU&6"gVbl/pql5!8[hnp]UNb-h5&?+m'm0Pa/d*l"U;%kW<^m2fW%CrfC=ddR?%*6>82[(^iP[o5Gq*"_Q,<kj(;/!J!$,dL^=aqP#-46=IKDB#?TD2#:5C18[pj"s5NYGTF+Lak9fJ1<GX9_r0OD*q)^T>Uc'9Cs;j%VH-*+rA+>u9<q'%MraEhggfH-A^^hVp^losO<n,2$$_%QJ7N!>,X_uLK3Z7Z4d&4]3`8tg1eskc=452moQD(`<Du`c:6$EVKoHFo%kAi32Xkp=Q@BMXB9-9C8&WA<C+)=k6Q[J5I'j[*b<mRhf&#LSMdtaf=!I'qG@q-o'cu4!uSUAQ5&AAVGRf4!ao8R5)IT0B/[ppJ]%YFHtMEAQ.s.G72aMtB^n$c;\<,2Q8sP=)QaA>EhtD@3s%'=!\ug^_7JCH7oPN#F]4]LGqI!E+d1ee\_+/S:p.,N,gkk2R8-=;/s7%:a^0YNLZ>&KP"Y-[RWo8qgtpZ(@e8ZhQ75FYts6DfO0!;R_8>qY*&)LfO&p8!Z5^&7:)s`R'j]+mY\H\^OCY3*mD;sT5%F"/;\;V%:ku:^+fA;1?M@[j^RJupC!LTIaZ<'nEbgro!J)p0[4iAJjssRaiGhk@_oZDe9Q;2HD.6['_n8:8eWnS1jL=U3K6o%ea5qA`A6#`&%`1@LM4:t[;L((/[4.V+B(foPhQR,R%COPNUA.&7A(IQb:fCCV+4Pi2!du]P6""/VG)`"_N<O60QZHkc,8V^MgYQ7=aO1h%t?/lM1%j/M1j$0JF_J$,>i6$"9c81*Rr4L@Oa35O\!fGhAaGd["DX"MpU/9<%#rq;>!,BG)2BL;:Ee_mp_R[/m8B[t9g9Gppd>+$50QNDJM%j;Zbkq18?2Y2&ia[r%Z(.TNeKnV^"QAfTtkc0F>lI=*8T+$Un*a2sHe9/R[ep1^]gMtj@dkDjsq@H>oKPCK")dh09MLj3q"&BLaI%U<I9AH]T7ebOuKeY91#s=l/j\!=s!L5[s=jo>_:_!eM-a*0MnHhqXX+9d%R5EY'3;:a,cKgGXVK5[X+@JI(8!..9?/OJj_>Z1"Fb%IH`c@+fZZpMV3!:0IrtR\7q57p&<FgRH7nH><>\ajTMb])u[C*Eqe.fdTJV2XfH]Fr0+Ha$eS\\`objT_SbZO4fTUEIOthYPNI8K%$NcTC.L/JnB0*XR<Xo66f[IC=n#>>GqtW5:Q6co%n0AaU?@0+9`'\J+cApOReT(=`V-*qGmd(nF48XU)cAoWS\B+N2[h&JB9WAmU%B0FDTr66o%oi7(r=lgX`3k'Cb2Ge3'q"!(aFF:,uU)jtbZ;@Gib@2WZDMdu>k>fcBYOEgf),^bXlds<8goX>1@G-]r:FcO"c?X]<%<(/L]do\pGfd[JA.;=.>gMmrUfYUKDG=tWaLap)DEn`5U4(Yfh]G$Tb<usd`0Db`0+SPnB4o"7Y9n/MnD'I+pYj)i?MdA1CY(0]C%=eZ)k2O\F@2tE#hF,f!.CRDfpgqr7oG:E?6;u+8t_5^I7foJW,c"Y:pM/8p7Y_dUm?hcnAf?SdPF6gnlV,5GQHu.s2CaBNiW]2&n%Fnk?tS70UQBP%frR')"n;/#fjWM3m%e1*_ID^V-/kO`T4m4VSrI\UW,2n"]l^Lt."[-@d6Fo5HE*VmHF</4J/_24b#UYb;pQ^40I%fr>:ZV;AhAo,]f\"Ba2qRe@C;h9Mcsf.=,QPs+C/ZEcS#HTl\%fD1'[M;jBEju9")=]TMV/![,KltM]&j0QjoE_PSYRn'/jas^7u%R<93Ad\lAt:3/ZeVfL<QRVLAnO^ch?:2hYh`Qq([B*;4+g=-4,7s%_6asb[qq6l7<3diJ;q++R,j?qUDC-e"j=9Xia\b)0+gZ5\[%m&=VH_T/5,#"i`%.^R$ndH^WO*dQ2eQ+h`Q7%D;VNu$OQ`qH1o>0D^SmddVJD);^T)@i2QlSM'c=O3gn8-bjl?7SNnH,_Y3Q^#^T%WP.opcOAW22_0!9o&VaJH-dC-UuM4<)^Bbto.,.LZi@]Vog1:;(3rqhdcO.jDmE3(XLSm8\*iA>U,c*a\43(ol/#+^P-%_HIP'E[%_BdT5Mg+pPqMMb#rEu-$':EKAEJmN+<)[[D:R1o57]8GcU8_(C8T@da'r6V*m69]9,,>UOC(q;4+'2=cW2.+RAl4(l7&:Zq(ie(h%K;c>*]4Q;711(bF+[pnJMlJ4Sj`C#=jk57;lQX_fc!IYlr?@8M9!P/7(KI;/D9B1p8@D<sT30b-45)NF:Ff%X?256,hqc(Di3?7X%9*[ODb?OX=J#/48''X\H[a1Q`bJTF(BpdoM_.0!,?SaSq3rpCnrD7)pA!gG?JF8U)'kNR(1:=9W.^<KD/euT1U[8:t`,migG#d-k%!$7aq>?J(sFS#S,10`C5%ae24lZT%MrUJVQ8Xm!G>($bFX/sIh[NpZl-IM@riCkh.c-G%%'98B"<&a\PXV`fqo%_`'F**H:lZA!j%WeX8+Z>Ehf!'(TT.rSsiPqtG$k>D&'lm>#m7SGG4=)*\ob/.NaGj/M9hdAK2"VW5u:\NEo>TDC5;?[Vg:Qs4aKJ]`?Pa!U2XI"kD%r7>]#=()m>\=<LL'fFAroI'4`F?YS#=+#Y*(2<b[;chi-U4(rK`2\m%*>gN/gKE>Ci)1Q0`$WD8^'+BE5k+=FBLS9n)d2A#"3S>D%WpFpd5%5%KC\A"095s$8:r&edam#HY]j"e-blE*[7X$Z(6*kqoCl&QhM;PQ(kO-Rp%r<scrJldRNOamfC+3DC@l#XE]TeT\Jsj\m%;a?qHicTnaq#V@>3!Z8%Z(4-=#6])MB,m#eaJSGe43-@]RfiBK`82Jq1<!]EMZ`NK0K(hQ"7fYMVYSpkn9otumGnLWoZK.J!j.j8%lIqUg[C(FkgB\apRX@ALi%/kc=3(Yd6i(`9jGf,qprrpFh=aiT2X,J76GeskD/;(eADD.0]D'YKU6MAE2#!m;dE0>6$[\mbFs<><%i29J2/G=I!DpS"brYtFNk:c3M'n>n3hrt@\^]4<'h08ni_s`*Qf:RNec`]S4o_ABWIe]NW5Q1),5Q(&t5Q(>truV4'e*he_nP=Z6%j%hmgqU9rlnUEjE/bAQ%^AHGFs8)9cnB"<)~>%AI9_PrivateDataEnd